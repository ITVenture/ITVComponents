using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ITVComponents.Decisions
{
    public interface IDecider
    {
        /// <summary>
        /// The DeciderContext providing data of Deciders for past decisions
        /// </summary>
        IDeciderContext Context { get; }

        /// <summary>
        /// Gets a value indicating whether this Decider instance is Context driven, so that Constraints can Store data when using a Decision-chain
        /// </summary>
        bool IsContextDriven { get; }

        /// <summary>
        /// Flushes all Context-bound values of this Decider
        /// </summary>
        void FlushContext();

        /// <summary>
        /// Adds a constraint to the list of available constraints
        /// </summary>
        /// <param name="constraint">a Constraint that needs to be processed when calling the Decide-Method</param>
        void AddConstraint(IConstraint constraint);

        /// <summary>
        /// Evaluates the provided data with the available constraints
        /// </summary>
        /// <param name="value">the provided data</param>
        /// <param name="method">the used decider-method.</param>
        /// <param name="messages">the messages that were generated by the attached constraints</param>
        /// <returns>a value indicating whether the provided data meets the criteria of this Decider or not</returns>
        DecisionResult Decide(object value, DecisionMethod method, out string messages);
    }
}
