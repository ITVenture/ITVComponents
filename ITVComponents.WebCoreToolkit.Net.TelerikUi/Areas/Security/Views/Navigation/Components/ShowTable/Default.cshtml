@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using ITVComponents.WebCoreToolkit.Routing
@using Kendo.Mvc.UI
@(Html.Kendo().Grid<NavigationMenuViewModel>().Name($"NavigationGrid{ViewData["parentId"]}")
    //.HtmlAttributes(new { style = "width:50vw;" })
    .Columns(columns =>
    {
        columns.Command(cmd => cmd.Custom("a").HtmlAttributes(new { @class = "sort-dragger" })).Width(50);
        columns.Bound(p => p.DisplayName).Title(TextsAndMessagesHelper.IWCN_General_DisplayName).ClientTemplate("<pre>#=DisplayName#</pre>");
        columns.Bound(p => p.Url);
        columns.MultiSelect(p => p.Tenants, "sys", "Tenants", "NavigationMenuId", TextsAndMessagesHelper.IWCN_NV_STDV_No_Tenant_Selected).Title(TextsAndMessagesHelper.IWCN_General_TenantTitle).HtmlAttributes(new{data_value_Primitive=true});
        //columns.ForeignKey(p => p.PermissionId, (IEnumerable) ViewData["Permissions"], "Key", "Label").Title("Modul-Berechtigung");
        columns.AjaxFk(p => p.PermissionId, "sys", "Permissions", "NavigationMenuId", minSearchLength: 2, filterable: true, customFilterData: new {TenantId = "##NULL##"}).Filterable(true);
    /*columns.ForeignKey(p => p.PermissionId, ds =>
    {
        ds.Read(cfg =>
        {
            cfg.Url("/ForeignKey/sys/Permissions");
        });
    }, "Key", "Label");*/
    columns.Bound(p => p.SpanClass).Title(TextsAndMessagesHelper.IWCN_NV_STDV_IconClass);
    if (Context.RequestServices.VerifyUserPermissions(new [] {"Navigation.Write"}))
    {
        columns.Command(ga =>
        {
            ga.Edit();
            ga.PopupConfirmDelete();
        }).Width(180);
    }

})
    .Events(c => c.DataBound("ITVenture.Pages.Navigation.initReordering"))
    .ToolBar(toolbar =>
    {
    toolbar.RefreshTable();
    if (Context.RequestServices.VerifyUserPermissions(new[] {"Navigation.Write"}))
    {
        toolbar.Create();
        toolbar.Custom().HtmlAttributes(new {onclick = "ITVenture.Pages.Navigation.toggleReordering(event)"}).Name(TextsAndMessagesHelper.IWCN_General_ToggleReordering);
    }
})
    .DataSource(dataSource =>
    {
    var src = dataSource
        .Ajax()
        .Read(read => read.Action("Read", "Navigation", new {parentId = ViewData["parentId"]}));
    if (Context.RequestServices.VerifyUserPermissions(new[] {"Navigation.Write"}))
    {
        src.Create(create => create.Action("Create", "Navigation", new {parentId = ViewData["parentId"]}).Data("ITVenture.Tools.TableHelper.serializeArrays"))
            .Update(update => update.Action("Update", "Navigation").Data("ITVenture.Tools.TableHelper.serializeArrays"))
            .Destroy(destroy => destroy.Action("Destroy", "Navigation"));
    }
    src.Model(m => m.Id(t => t.NavigationMenuId))
        .Sort(s => s.Add(x => x.SortOrder).Ascending())
        .Events(e => e.Sync("function(){this.read();}"));
})
    .Scrollable(s => s.Height("auto"))
    .ClientDetailTemplateId("NavDetails")
    .Resizable(c => c.Columns(true)))