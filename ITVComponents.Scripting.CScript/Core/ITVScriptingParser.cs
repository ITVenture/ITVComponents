//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ITVScripting.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ITVComponents.Scripting.CScript.Core {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ITVScriptingParser : Parser {
	//protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		LineTerminator=18, OpenBracket=19, CloseBracket=20, OpenParen=21, CloseParen=22, 
		OpenBrace=23, CloseBrace=24, SemiColon=25, Comma=26, Assign=27, DoubleQMark=28, 
		QuestionMark=29, Colon=30, Dot=31, DotQ=32, PlusPlus=33, MinusMinus=34, 
		Plus=35, Minus=36, BitNot=37, Not=38, Multiply=39, Divide=40, Modulus=41, 
		RightShiftArithmetic=42, LeftShiftArithmetic=43, LessThan=44, MoreThan=45, 
		LessThanEquals=46, GreaterThanEquals=47, Equals=48, NotEquals=49, BitAnd=50, 
		BitXOr=51, BitOr=52, And=53, Or=54, MultiplyAssign=55, DivideAssign=56, 
		ModulusAssign=57, PlusAssign=58, MinusAssign=59, LeftShiftArithmeticAssign=60, 
		RightShiftArithmeticAssign=61, BitAndAssign=62, BitXorAssign=63, BitOrAssign=64, 
		NativeReference=65, NativeUse=66, NativeExecution=67, DecimalLiteral=68, 
		HexIntegerLiteral=69, OctalIntegerLiteral=70, Break=71, Do=72, Case=73, 
		Else=74, New=75, Catch=76, Finally=77, Return=78, Continue=79, For=80, 
		Foreach=81, Switch=82, While=83, Function=84, Default=85, If=86, Throw=87, 
		In=88, Try=89, Has=90, Is=91, Identifier=92, StringLiteral=93, NativeCodeLiteral=94, 
		WhiteSpaces=95, MultiLineComment=96, SingleLineComment=97, UnexpectedCharacter=98;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_statement = 3, 
		RULE_block = 4, RULE_statementList = 5, RULE_emptyStatement = 6, RULE_expressionStatement = 7, 
		RULE_ifStatement = 8, RULE_iterationStatement = 9, RULE_nativeStatement = 10, 
		RULE_continueStatement = 11, RULE_breakStatement = 12, RULE_returnStatement = 13, 
		RULE_switchStatement = 14, RULE_caseBlock = 15, RULE_caseClauses = 16, 
		RULE_caseClause = 17, RULE_defaultClause = 18, RULE_throwStatement = 19, 
		RULE_tryStatement = 20, RULE_catchProduction = 21, RULE_finallyProduction = 22, 
		RULE_functionDeclaration = 23, RULE_formalParameterList = 24, RULE_functionBody = 25, 
		RULE_arrayLiteral = 26, RULE_elementList = 27, RULE_objectLiteral = 28, 
		RULE_propertyNameAndValueList = 29, RULE_propertyAssignment = 30, RULE_arguments = 31, 
		RULE_typeArguments = 32, RULE_explicitTypeHint = 33, RULE_typedArguments = 34, 
		RULE_typeIdentifier = 35, RULE_argumentList = 36, RULE_expressionSequence = 37, 
		RULE_singleExpression = 38, RULE_assignmentOperator = 39, RULE_literal = 40, 
		RULE_numericLiteral = 41, RULE_identifierName = 42, RULE_reservedWord = 43, 
		RULE_keyword = 44, RULE_eos = 45, RULE_eof = 46, RULE_nullLiteral = 47, 
		RULE_refLiteral = 48, RULE_booleanLiteral = 49, RULE_typeLiteral = 50, 
		RULE_typeLiteralIdentifier = 51;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "statement", "block", "statementList", 
		"emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
		"nativeStatement", "continueStatement", "breakStatement", "returnStatement", 
		"switchStatement", "caseBlock", "caseClauses", "caseClause", "defaultClause", 
		"throwStatement", "tryStatement", "catchProduction", "finallyProduction", 
		"functionDeclaration", "formalParameterList", "functionBody", "arrayLiteral", 
		"elementList", "objectLiteral", "propertyNameAndValueList", "propertyAssignment", 
		"arguments", "typeArguments", "explicitTypeHint", "typedArguments", "typeIdentifier", 
		"argumentList", "expressionSequence", "singleExpression", "assignmentOperator", 
		"literal", "numericLiteral", "identifierName", "reservedWord", "keyword", 
		"eos", "eof", "nullLiteral", "refLiteral", "booleanLiteral", "typeLiteral", 
		"typeLiteralIdentifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'`R('", "'`U('", "'`'", "'->'", "'#'", "'?.'", "'`E('", "'as'", 
		"'::'", "'with'", "'`E(#'", "'null'", "'ref'", "'true'", "'false'", "'''", 
		"'@'", null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "'='", 
		"'??'", "'?'", "':'", "'.'", "'.?'", "'++'", "'--'", "'+'", "'-'", "'~'", 
		"'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", 
		"'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'`R'", "'`U'", 
		"'`E'", null, null, null, "'break'", "'do'", "'case'", "'else'", "'new'", 
		"'catch'", "'finally'", "'return'", "'continue'", "'for'", "'foreach'", 
		"'switch'", "'while'", "'function'", "'default'", "'if'", "'throw'", "'in'", 
		"'try'", "'has'", "'is'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "LineTerminator", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", "Comma", 
		"Assign", "DoubleQMark", "QuestionMark", "Colon", "Dot", "DotQ", "PlusPlus", 
		"MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", 
		"Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals", "NotEquals", 
		"BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", 
		"ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"NativeReference", "NativeUse", "NativeExecution", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "Break", "Do", "Case", "Else", "New", "Catch", 
		"Finally", "Return", "Continue", "For", "Foreach", "Switch", "While", 
		"Function", "Default", "If", "Throw", "In", "Try", "Has", "Is", "Identifier", 
		"StringLiteral", "NativeCodeLiteral", "WhiteSpaces", "MultiLineComment", 
		"SingleLineComment", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ITVScripting.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	/*static ITVScriptingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}*/


	  
	    ///<summary>Returns <c>true</c> iff on the current index of the parser's
	    ///token stream a token of the given <c>type</c> exists on the
	    ///<c>Hidden</c> channel.</summary>
	    ///<param name="type">the type of the token on the <c>Hidden</c> channel
	    ///to check.</param>
	    ///<returns><c>true</c> iff on the current index of the parser's
	    ///token stream a token of the given <c>type</c> exists on the
	    ///<c>Hidden</c> channel.</returns>
	    private bool here(int type) {

	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
	        IToken ahead = TokenStream.Get(possibleIndexEosToken);

	        // Check if the token resides on the Hidden channel and if it's of the
	        // provided type.
	        return (ahead.Channel == Lexer.Hidden) && (ahead.Type == type);
	    }

	    ///<summary>Returns <c>true</c> iff on the current index of the parser's
	    ///token stream a token exists on the <c>Hidden</c> channel which
	    ///either is a line terminator, or is a multi line comment that
	    ///contains a line terminator.</summary>
	    ///<returns><c>true</c> iff on the current index of the parser's
	    ///token stream a token exists on the <c>Hidden</c> channel which
	    ///either is a line terminator, or is a multi line comment that
	    ///contains a line terminator.</returns>
	    private bool lineTerminatorAhead() {

	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
	        IToken ahead = TokenStream.Get(possibleIndexEosToken);

	        if (ahead.Channel != Lexer.Hidden) {
	            // We're only interested in tokens on the Hidden channel.
	            return false;
	        }

			if (ahead.Type == LineTerminator) {
	            // There is definitely a line terminator ahead.
	            return true;
	        }

	        while (ahead.Type == WhiteSpaces) {
	            // Get the token ahead of the current whitespaces.
	            possibleIndexEosToken = ahead.TokenIndex - 1;
	            ahead = TokenStream.Get(possibleIndexEosToken);
	        }
	        // Get the token's text and type.
	        string text = ahead.Text;
	        int type = ahead.Type;

	        // Check if the token is, or contains a line terminator.
	        return (type == MultiLineComment && (text.Contains("\r") || text.Contains("\n"))) ||
	                (type == LineTerminator);
	    }                                

		/*public ITVScriptingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ITVScriptingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}*/
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ITVScriptingParser.Eof, 0); }
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 104; sourceElements();
				}
				break;
			}
			State = 107; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 109; sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public NativeStatementContext nativeStatement() {
			return GetRuleContext<NativeStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; emptyStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121; ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 122; iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123; continueStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 124; breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 125; returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 126; switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 127; throwStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 128; tryStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 129; nativeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(OpenBrace);
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 133; statementList();
				}
				break;
			}
			State = 136; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 10, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 138; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(ITVScriptingParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			if (!((TokenStream.LA(1) != OpenBrace) && (TokenStream.LA(1) != Function))) throw new FailedPredicateException(this, "(TokenStream.LA(1) != OpenBrace) && (TokenStream.LA(1) != Function)");
			State = 146; expressionSequence();
			State = 147; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(ITVScriptingParser.If, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(ITVScriptingParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(If);
			State = 150; Match(OpenParen);
			State = 151; singleExpression(0);
			State = 152; Match(CloseParen);
			State = 153; statement();
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 154; Match(Else);
				State = 155; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		public ITerminalNode Do() { return GetToken(ITVScriptingParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(ITVScriptingParser.While, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		public ITerminalNode While() { return GetToken(ITVScriptingParser.While, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(ITVScriptingParser.For, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		public ITerminalNode Foreach() { return GetToken(ITVScriptingParser.Foreach, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode In() { return GetToken(ITVScriptingParser.In, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_iterationStatement);
		int _la;
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Do:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(Do);
				State = 159; statement();
				State = 160; Match(While);
				State = 161; Match(OpenParen);
				State = 162; singleExpression(0);
				State = 163; Match(CloseParen);
				State = 164; eos();
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(While);
				State = 167; Match(OpenParen);
				State = 168; singleExpression(0);
				State = 169; Match(CloseParen);
				State = 170; statement();
				}
				break;
			case Foreach:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; Match(Foreach);
				State = 173; Match(OpenParen);
				State = 174; singleExpression(0);
				State = 175; Match(In);
				State = 176; singleExpression(0);
				State = 177; Match(CloseParen);
				State = 178; statement();
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 180; Match(For);
				State = 181; Match(OpenParen);
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DecimalLiteral - 68)) | (1L << (HexIntegerLiteral - 68)) | (1L << (OctalIntegerLiteral - 68)) | (1L << (New - 68)) | (1L << (Function - 68)) | (1L << (Identifier - 68)) | (1L << (StringLiteral - 68)))) != 0)) {
					{
					State = 182; expressionSequence();
					}
				}

				State = 185; Match(SemiColon);
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DecimalLiteral - 68)) | (1L << (HexIntegerLiteral - 68)) | (1L << (OctalIntegerLiteral - 68)) | (1L << (New - 68)) | (1L << (Function - 68)) | (1L << (Identifier - 68)) | (1L << (StringLiteral - 68)))) != 0)) {
					{
					State = 186; expressionSequence();
					}
				}

				State = 189; Match(SemiColon);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DecimalLiteral - 68)) | (1L << (HexIntegerLiteral - 68)) | (1L << (OctalIntegerLiteral - 68)) | (1L << (New - 68)) | (1L << (Function - 68)) | (1L << (Identifier - 68)) | (1L << (StringLiteral - 68)))) != 0)) {
					{
					State = 190; expressionSequence();
					}
				}

				State = 193; Match(CloseParen);
				State = 194; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeStatementContext : ParserRuleContext {
		public NativeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeStatement; } }
	 
		public NativeStatementContext() { }
		public virtual void CopyFrom(NativeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeUsingContext : NativeStatementContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public ITerminalNode StringLiteral() { return GetToken(ITVScriptingParser.StringLiteral, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public NativeUsingContext(NativeStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NativeReferenceContext : NativeStatementContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public ITerminalNode StringLiteral() { return GetToken(ITVScriptingParser.StringLiteral, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public NativeReferenceContext(NativeStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeStatementContext nativeStatement() {
		NativeStatementContext _localctx = new NativeStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_nativeStatement);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new NativeReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(T__0);
				State = 198; Match(Identifier);
				State = 199; Match(CloseParen);
				State = 200; Match(StringLiteral);
				State = 201; eos();
				}
				break;
			case T__1:
				_localctx = new NativeUsingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; Match(T__1);
				State = 203; Match(Identifier);
				State = 204; Match(CloseParen);
				State = 205; Match(StringLiteral);
				State = 206; eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(ITVScriptingParser.Continue, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(Continue);
			State = 210; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(ITVScriptingParser.Break, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(Break);
			State = 213; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(ITVScriptingParser.Return, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(Return);
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 216; singleExpression(0);
				}
				break;
			}
			State = 219; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(ITVScriptingParser.Switch, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(Switch);
			State = 222; Match(OpenParen);
			State = 223; singleExpression(0);
			State = 224; Match(CloseParen);
			State = 225; caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public CaseClausesContext caseClauses() {
			return GetRuleContext<CaseClausesContext>(0);
		}
		public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(OpenBrace);
			State = 228; caseClauses();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 229; defaultClause();
				}
			}

			State = 232; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 32, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 234; caseClause();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(ITVScriptingParser.Case, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(Case);
			State = 240; singleExpression(0);
			State = 241; Match(Colon);
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 242; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		public ITerminalNode Default() { return GetToken(ITVScriptingParser.Default, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(Default);
			State = 246; Match(Colon);
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 247; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(ITVScriptingParser.Throw, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(Throw);
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 251; singleExpression(0);
				}
				break;
			}
			State = 254; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(ITVScriptingParser.Try, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_tryStatement);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; Match(Try);
				State = 257; block();
				State = 258; catchProduction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; Match(Try);
				State = 261; block();
				State = 262; finallyProduction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264; Match(Try);
				State = 265; block();
				State = 266; catchProduction();
				State = 267; finallyProduction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(ITVScriptingParser.Catch, 0); }
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 42, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(Catch);
			State = 272; Match(OpenParen);
			State = 273; Match(Identifier);
			State = 274; Match(CloseParen);
			State = 275; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		public ITerminalNode Finally() { return GetToken(ITVScriptingParser.Finally, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 44, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(Finally);
			State = 278; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(ITVScriptingParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(Function);
			State = 281; Match(Identifier);
			State = 282; Match(OpenParen);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 283; formalParameterList();
				}
			}

			State = 286; Match(CloseParen);
			State = 287; Match(OpenBrace);
			State = 288; functionBody();
			State = 289; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ITVScriptingParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ITVScriptingParser.Identifier, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(Identifier);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 292; Match(Comma);
				State = 293; Match(Identifier);
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 299; sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(OpenBracket);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DecimalLiteral - 68)) | (1L << (HexIntegerLiteral - 68)) | (1L << (OctalIntegerLiteral - 68)) | (1L << (New - 68)) | (1L << (Function - 68)) | (1L << (Identifier - 68)) | (1L << (StringLiteral - 68)))) != 0)) {
				{
				State = 303; elementList();
				}
			}

			State = 306; Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 54, RULE_elementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; singleExpression(0);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 309; Match(Comma);
				State = 310; singleExpression(0);
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public PropertyNameAndValueListContext propertyNameAndValueList() {
			return GetRuleContext<PropertyNameAndValueListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(OpenBrace);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Break - 71)) | (1L << (Do - 71)) | (1L << (Case - 71)) | (1L << (Else - 71)) | (1L << (New - 71)) | (1L << (Catch - 71)) | (1L << (Finally - 71)) | (1L << (Return - 71)) | (1L << (Continue - 71)) | (1L << (For - 71)) | (1L << (Switch - 71)) | (1L << (While - 71)) | (1L << (Function - 71)) | (1L << (Default - 71)) | (1L << (If - 71)) | (1L << (Throw - 71)) | (1L << (In - 71)) | (1L << (Try - 71)) | (1L << (Has - 71)) | (1L << (Is - 71)) | (1L << (Identifier - 71)))) != 0)) {
				{
				State = 317; propertyNameAndValueList();
				}
			}

			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 320; Match(Comma);
				}
			}

			State = 323; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameAndValueListContext : ParserRuleContext {
		public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		public PropertyNameAndValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyNameAndValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyNameAndValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameAndValueListContext propertyNameAndValueList() {
		PropertyNameAndValueListContext _localctx = new PropertyNameAndValueListContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertyNameAndValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; propertyAssignment();
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 328;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Comma:
						{
						State = 326; Match(Comma);
						}
						break;
					case T__11:
					case T__13:
					case T__14:
					case T__15:
					case Break:
					case Do:
					case Case:
					case Else:
					case New:
					case Catch:
					case Finally:
					case Return:
					case Continue:
					case For:
					case Switch:
					case While:
					case Function:
					case Default:
					case If:
					case Throw:
					case In:
					case Try:
					case Has:
					case Is:
					case Identifier:
						{
						NotifyErrorListeners("Missing ','!");
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 330; propertyAssignment();
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 60, RULE_propertyAssignment);
		try {
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; identifierName();
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Colon:
				{
				State = 337; Match(Colon);
				}
				break;
			case Assign:
				{
				State = 338; Match(Assign);
				NotifyErrorListeners("':' expected!");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 342; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 62, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(OpenParen);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DecimalLiteral - 68)) | (1L << (HexIntegerLiteral - 68)) | (1L << (OctalIntegerLiteral - 68)) | (1L << (New - 68)) | (1L << (Function - 68)) | (1L << (Identifier - 68)) | (1L << (StringLiteral - 68)))) != 0)) {
				{
				State = 345; argumentList();
				}
			}

			State = 348; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
	 
		public TypeArgumentsContext() { }
		public virtual void CopyFrom(TypeArgumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpenGenericsContext : TypeArgumentsContext {
		public ITerminalNode[] DecimalLiteral() { return GetTokens(ITVScriptingParser.DecimalLiteral); }
		public ITerminalNode DecimalLiteral(int i) {
			return GetToken(ITVScriptingParser.DecimalLiteral, i);
		}
		public OpenGenericsContext(TypeArgumentsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenGenerics(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinalGenericsContext : TypeArgumentsContext {
		public TypedArgumentsContext typedArguments() {
			return GetRuleContext<TypedArgumentsContext>(0);
		}
		public FinalGenericsContext(TypeArgumentsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalGenerics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeArguments);
		try {
			int _alt;
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LessThan:
				_localctx = new FinalGenericsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 350; Match(LessThan);
				State = 351; typedArguments();
				State = 352; Match(MoreThan);
				}
				break;
			case T__2:
				_localctx = new OpenGenericsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 354; Match(T__2);
						State = 355; Match(DecimalLiteral);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 358;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitTypeHintContext : ParserRuleContext {
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public ExplicitTypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitTypeHint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitTypeHintContext explicitTypeHint() {
		ExplicitTypeHintContext _localctx = new ExplicitTypeHintContext(Context, State);
		EnterRule(_localctx, 66, RULE_explicitTypeHint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__3);
			State = 363; typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedArgumentsContext : ParserRuleContext {
		public TypeIdentifierContext[] typeIdentifier() {
			return GetRuleContexts<TypeIdentifierContext>();
		}
		public TypeIdentifierContext typeIdentifier(int i) {
			return GetRuleContext<TypeIdentifierContext>(i);
		}
		public TypedArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedArgumentsContext typedArguments() {
		TypedArgumentsContext _localctx = new TypedArgumentsContext(Context, State);
		EnterRule(_localctx, 68, RULE_typedArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; typeIdentifier();
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 366; Match(Comma);
				State = 367; typeIdentifier();
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ITVScriptingParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ITVScriptingParser.Identifier, i);
		}
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(T__4);
			State = 374; Match(Identifier);
			State = 379;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 375; Match(Dot);
					State = 376; Match(Identifier);
					}
					} 
				}
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 72, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; singleExpression(0);
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 383; Match(Comma);
				State = 384; singleExpression(0);
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; singleExpression(0);
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 391; Match(Comma);
					State = 392; singleExpression(0);
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExplicitTypeHintContext explicitTypeHint() {
			return GetRuleContext<ExplicitTypeHintContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		public ITerminalNode Function() { return GetToken(ITVScriptingParser.Function, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NativeExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(ITVScriptingParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ITVScriptingParser.Identifier, i);
		}
		public NativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotQExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ExplicitTypeHintContext explicitTypeHint() {
			return GetRuleContext<ExplicitTypeHintContext>(0);
		}
		public MemberDotQExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotQExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NativeLiteralExpressionContext : SingleExpressionContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public ITerminalNode NativeCodeLiteral() { return GetToken(ITVScriptingParser.NativeCodeLiteral, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NativeLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(ITVScriptingParser.New, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ExplicitTypeHintContext explicitTypeHint() {
			return GetRuleContext<ExplicitTypeHintContext>(0);
		}
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasMemberExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Has() { return GetToken(ITVScriptingParser.Has, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitTypeHintContext explicitTypeHint() {
			return GetRuleContext<ExplicitTypeHintContext>(0);
		}
		public HasMemberExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExplicitTypeHintContext explicitTypeHint() {
			return GetRuleContext<ExplicitTypeHintContext>(0);
		}
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceIsNullExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public InstanceIsNullExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceIsNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIsExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Is() { return GetToken(ITVScriptingParser.Is, 0); }
		public MemberIsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Function:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 399; Match(Function);
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 400; Match(Identifier);
					}
				}

				State = 403; Match(OpenParen);
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 404; formalParameterList();
					}
				}

				State = 407; Match(CloseParen);
				State = 408; Match(OpenBrace);
				State = 409; functionBody();
				State = 410; Match(CloseBrace);
				}
				break;
			case New:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 412; Match(New);
				State = 413; singleExpression(0);
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || _la==LessThan) {
					{
					State = 414; typeArguments();
					}
				}

				State = 417; arguments();
				}
				break;
			case PlusPlus:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 419; Match(PlusPlus);
				State = 420; singleExpression(27);
				}
				break;
			case MinusMinus:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 421; Match(MinusMinus);
				State = 422; singleExpression(26);
				}
				break;
			case Plus:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 423; Match(Plus);
				State = 424; singleExpression(25);
				}
				break;
			case Minus:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 425; Match(Minus);
				State = 426; singleExpression(24);
				}
				break;
			case BitNot:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 427; Match(BitNot);
				State = 428; singleExpression(23);
				}
				break;
			case Not:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 429; Match(Not);
				State = 430; singleExpression(22);
				}
				break;
			case Identifier:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 431; Match(Identifier);
				}
				break;
			case T__11:
			case T__13:
			case T__14:
			case T__15:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case StringLiteral:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 432; literal();
				}
				break;
			case OpenBracket:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 433; arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 434; objectLiteral();
				}
				break;
			case OpenParen:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 435; Match(OpenParen);
				State = 436; singleExpression(0);
				State = 437; Match(CloseParen);
				}
				break;
			case T__6:
				{
				_localctx = new NativeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 439; Match(T__6);
				State = 440; singleExpression(0);
				State = 441; Match(T__7);
				State = 442; Match(Identifier);
				State = 443; Match(T__3);
				State = 444; Match(Identifier);
				State = 445; Match(CloseParen);
				State = 446; Match(T__8);
				State = 447; singleExpression(0);
				State = 448; Match(T__9);
				State = 449; singleExpression(2);
				}
				break;
			case T__10:
				{
				_localctx = new NativeLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 451; Match(T__10);
				State = 452; Match(Identifier);
				State = 453; Match(CloseParen);
				State = 454; Match(T__8);
				State = 455; Match(NativeCodeLiteral);
				State = 456; Match(T__9);
				State = 457; singleExpression(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 556;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 554;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
					case 1:
						{
						_localctx = new MemberIsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 460;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 461; Match(Is);
						State = 462; singleExpression(33);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 463;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 464;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 465; singleExpression(22);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 466;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 467;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 468; singleExpression(21);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 469;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 470;
						_la = TokenStream.LA(1);
						if ( !(_la==RightShiftArithmetic || _la==LeftShiftArithmetic) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 471; singleExpression(20);
						}
						break;
					case 5:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 472;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 473;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 474; singleExpression(19);
						}
						break;
					case 6:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 475;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 476;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 477; singleExpression(18);
						}
						break;
					case 7:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 478;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 479; Match(BitAnd);
						State = 480; singleExpression(17);
						}
						break;
					case 8:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 481;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 482; Match(BitXOr);
						State = 483; singleExpression(16);
						}
						break;
					case 9:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 484;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 485; Match(BitOr);
						State = 486; singleExpression(15);
						}
						break;
					case 10:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 487;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 488; Match(And);
						State = 489; singleExpression(14);
						}
						break;
					case 11:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 490;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 491; Match(Or);
						State = 492; singleExpression(13);
						}
						break;
					case 12:
						{
						_localctx = new InstanceIsNullExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 493;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 494; Match(DoubleQMark);
						State = 495; singleExpression(12);
						}
						break;
					case 13:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 496;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 497; Match(QuestionMark);
						State = 498; singleExpression(0);
						State = 499; Match(Colon);
						State = 500; singleExpression(11);
						}
						break;
					case 14:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 502;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 503; Match(Assign);
						State = 504; singleExpression(10);
						}
						break;
					case 15:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 505;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 506; assignmentOperator();
						State = 507; singleExpression(9);
						}
						break;
					case 16:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 509;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 510; Match(OpenBracket);
						State = 511; expressionSequence();
						State = 512; Match(CloseBracket);
						State = 514;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
						case 1:
							{
							State = 513; explicitTypeHint();
							}
							break;
						}
						}
						break;
					case 17:
						{
						_localctx = new MemberDotQExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 516;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 517; Match(T__5);
						State = 518; identifierName();
						State = 520;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
						case 1:
							{
							State = 519; explicitTypeHint();
							}
							break;
						}
						}
						break;
					case 18:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 522;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 523; Match(Dot);
						State = 524; identifierName();
						State = 526;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
						case 1:
							{
							State = 525; explicitTypeHint();
							}
							break;
						}
						}
						break;
					case 19:
						{
						_localctx = new HasMemberExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 528;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 529; Match(Has);
						State = 530; identifierName();
						State = 532;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
						case 1:
							{
							State = 531; typeArguments();
							}
							break;
						}
						State = 535;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
						case 1:
							{
							State = 534; arguments();
							}
							break;
						}
						State = 538;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
						case 1:
							{
							State = 537; explicitTypeHint();
							}
							break;
						}
						}
						break;
					case 20:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 540;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 542;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__2 || _la==LessThan) {
							{
							State = 541; typeArguments();
							}
						}

						State = 544; arguments();
						State = 546;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
						case 1:
							{
							State = 545; explicitTypeHint();
							}
							break;
						}
						}
						break;
					case 21:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 548;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 549;
						if (!(!here(LineTerminator))) throw new FailedPredicateException(this, "!here(LineTerminator)");
						State = 550; Match(PlusPlus);
						}
						break;
					case 22:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 551;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 552;
						if (!(!here(LineTerminator))) throw new FailedPredicateException(this, "!here(LineTerminator)");
						State = 553; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 558;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (MultiplyAssign - 55)) | (1L << (DivideAssign - 55)) | (1L << (ModulusAssign - 55)) | (1L << (PlusAssign - 55)) | (1L << (MinusAssign - 55)) | (1L << (LeftShiftArithmeticAssign - 55)) | (1L << (RightShiftArithmeticAssign - 55)) | (1L << (BitAndAssign - 55)) | (1L << (BitXorAssign - 55)) | (1L << (BitOrAssign - 55)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(ITVScriptingParser.StringLiteral, 0); }
		public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public RefLiteralContext refLiteral() {
			return GetRuleContext<RefLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 80, RULE_literal);
		try {
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562; booleanLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 563; Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 564; typeLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 565; numericLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 566; refLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(ITVScriptingParser.DecimalLiteral, 0); }
		public ITerminalNode HexIntegerLiteral() { return GetToken(ITVScriptingParser.HexIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral() { return GetToken(ITVScriptingParser.OctalIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DecimalLiteral - 68)) | (1L << (HexIntegerLiteral - 68)) | (1L << (OctalIntegerLiteral - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 84, RULE_identifierName);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 571; Match(Identifier);
				}
				break;
			case T__11:
			case T__13:
			case T__14:
			case T__15:
			case Break:
			case Do:
			case Case:
			case Else:
			case New:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case Switch:
			case While:
			case Function:
			case Default:
			case If:
			case Throw:
			case In:
			case Try:
			case Has:
			case Is:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572; reservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 86, RULE_reservedWord);
		try {
			State = 580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Case:
			case Else:
			case New:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case Switch:
			case While:
			case Function:
			case Default:
			case If:
			case Throw:
			case In:
			case Try:
			case Has:
			case Is:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575; keyword();
				}
				break;
			case T__11:
			case T__13:
			case T__14:
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 578;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
				case T__15:
					{
					State = 576; nullLiteral();
					}
					break;
				case T__13:
				case T__14:
					{
					State = 577; booleanLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(ITVScriptingParser.Break, 0); }
		public ITerminalNode Do() { return GetToken(ITVScriptingParser.Do, 0); }
		public ITerminalNode Case() { return GetToken(ITVScriptingParser.Case, 0); }
		public ITerminalNode Else() { return GetToken(ITVScriptingParser.Else, 0); }
		public ITerminalNode New() { return GetToken(ITVScriptingParser.New, 0); }
		public ITerminalNode Catch() { return GetToken(ITVScriptingParser.Catch, 0); }
		public ITerminalNode Finally() { return GetToken(ITVScriptingParser.Finally, 0); }
		public ITerminalNode Return() { return GetToken(ITVScriptingParser.Return, 0); }
		public ITerminalNode Continue() { return GetToken(ITVScriptingParser.Continue, 0); }
		public ITerminalNode For() { return GetToken(ITVScriptingParser.For, 0); }
		public ITerminalNode Switch() { return GetToken(ITVScriptingParser.Switch, 0); }
		public ITerminalNode While() { return GetToken(ITVScriptingParser.While, 0); }
		public ITerminalNode Function() { return GetToken(ITVScriptingParser.Function, 0); }
		public ITerminalNode Default() { return GetToken(ITVScriptingParser.Default, 0); }
		public ITerminalNode If() { return GetToken(ITVScriptingParser.If, 0); }
		public ITerminalNode Throw() { return GetToken(ITVScriptingParser.Throw, 0); }
		public ITerminalNode In() { return GetToken(ITVScriptingParser.In, 0); }
		public ITerminalNode Try() { return GetToken(ITVScriptingParser.Try, 0); }
		public ITerminalNode Has() { return GetToken(ITVScriptingParser.Has, 0); }
		public ITerminalNode Is() { return GetToken(ITVScriptingParser.Is, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 88, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Break - 71)) | (1L << (Do - 71)) | (1L << (Case - 71)) | (1L << (Else - 71)) | (1L << (New - 71)) | (1L << (Catch - 71)) | (1L << (Finally - 71)) | (1L << (Return - 71)) | (1L << (Continue - 71)) | (1L << (For - 71)) | (1L << (Switch - 71)) | (1L << (While - 71)) | (1L << (Function - 71)) | (1L << (Default - 71)) | (1L << (If - 71)) | (1L << (Throw - 71)) | (1L << (In - 71)) | (1L << (Try - 71)) | (1L << (Has - 71)) | (1L << (Is - 71)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(ITVScriptingParser.SemiColon, 0); }
		public ITerminalNode Eof() { return GetToken(ITVScriptingParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 90, RULE_eos);
		try {
			State = 588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584; Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 586;
				if (!(lineTerminatorAhead())) throw new FailedPredicateException(this, "lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 587;
				if (!(TokenStream.LT(1).Type == CloseBrace)) throw new FailedPredicateException(this, "TokenStream.LT(1).Type == CloseBrace");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EofContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ITVScriptingParser.Eof, 0); }
		public EofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eof; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EofContext eof() {
		EofContext _localctx = new EofContext(Context, State);
		EnterRule(_localctx, 92, RULE_eof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_nullLiteral);
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; Match(T__11);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; typeLiteral();
				State = 594; Match(Dot);
				State = 595; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefLiteralContext : ParserRuleContext {
		public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public RefLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefLiteralContext refLiteral() {
		RefLiteralContext _localctx = new RefLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_refLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; typeLiteral();
			State = 600; Match(Dot);
			State = 601; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralContext : ParserRuleContext {
		public TypeLiteralIdentifierContext typeLiteralIdentifier() {
			return GetRuleContext<TypeLiteralIdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(ITVScriptingParser.StringLiteral, 0); }
		public TypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralContext typeLiteral() {
		TypeLiteralContext _localctx = new TypeLiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; Match(T__15);
			State = 606; typeLiteralIdentifier();
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2 || _la==LessThan) {
				{
				State = 607; typeArguments();
				}
			}

			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 610; Match(T__16);
				State = 611; Match(StringLiteral);
				}
			}

			State = 614; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ITVScriptingParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ITVScriptingParser.Identifier, i);
		}
		public TypeLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteralIdentifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralIdentifierContext typeLiteralIdentifier() {
		TypeLiteralIdentifierContext _localctx = new TypeLiteralIdentifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_typeLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(Identifier);
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot || _la==Plus) {
				{
				{
				State = 617;
				_la = TokenStream.LA(1);
				if ( !(_la==Dot || _la==Plus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 618; Match(Identifier);
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 38: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 45: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (TokenStream.LA(1) != OpenBrace) && (TokenStream.LA(1) != Function);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 32);
		case 2: return Precpred(Context, 21);
		case 3: return Precpred(Context, 20);
		case 4: return Precpred(Context, 19);
		case 5: return Precpred(Context, 18);
		case 6: return Precpred(Context, 17);
		case 7: return Precpred(Context, 16);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 13);
		case 11: return Precpred(Context, 12);
		case 12: return Precpred(Context, 11);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 9);
		case 15: return Precpred(Context, 8);
		case 16: return Precpred(Context, 36);
		case 17: return Precpred(Context, 35);
		case 18: return Precpred(Context, 34);
		case 19: return Precpred(Context, 33);
		case 20: return Precpred(Context, 31);
		case 21: return Precpred(Context, 29);
		case 22: return !here(LineTerminator);
		case 23: return Precpred(Context, 28);
		case 24: return !here(LineTerminator);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return lineTerminatorAhead();
		case 26: return TokenStream.LT(1).Type == CloseBrace;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x64', '\x273', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x3', '\x2', '\x5', '\x2', 'l', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x6', '\x3', 'q', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', 'r', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'w', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x85', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x89', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', '\a', '\x8E', '\n', '\a', 
		'\r', '\a', '\xE', '\a', '\x8F', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x9F', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xBA', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xBE', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xC2', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xC6', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xD2', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xDC', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\xE9', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x6', '\x12', '\xEE', '\n', '\x12', '\r', '\x12', 
		'\xE', '\x12', '\xEF', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\xF6', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xFB', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xFF', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x110', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x11F', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x129', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x12C', '\v', '\x1A', 
		'\x3', '\x1B', '\x5', '\x1B', '\x12F', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x133', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x13A', '\n', 
		'\x1D', '\f', '\x1D', '\xE', '\x1D', '\x13D', '\v', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x141', '\n', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x144', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x14B', '\n', '\x1F', '\x3', 
		'\x1F', '\a', '\x1F', '\x14E', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', 
		'\x151', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x157', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x5', '!', '\x15D', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x6', 
		'\"', '\x167', '\n', '\"', '\r', '\"', '\xE', '\"', '\x168', '\x5', '\"', 
		'\x16B', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\a', '$', '\x173', '\n', '$', '\f', '$', '\xE', '$', 
		'\x176', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', 
		'%', '\x17C', '\n', '%', '\f', '%', '\xE', '%', '\x17F', '\v', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x184', '\n', '&', '\f', '&', 
		'\xE', '&', '\x187', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\a', '\'', '\x18C', '\n', '\'', '\f', '\'', '\xE', '\'', '\x18F', '\v', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x194', '\n', '(', 
		'\x3', '(', '\x3', '(', '\x5', '(', '\x198', '\n', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x1A2', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x5', '(', '\x1CD', '\n', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x205', 
		'\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', 
		'\x20B', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x211', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x217', '\n', '(', '\x3', '(', '\x5', '(', '\x21A', '\n', 
		'(', '\x3', '(', '\x5', '(', '\x21D', '\n', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x221', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x225', 
		'\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\a', '(', '\x22D', '\n', '(', '\f', '(', '\xE', '(', '\x230', 
		'\v', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x23A', '\n', '*', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x5', ',', '\x240', '\n', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x245', '\n', '-', '\x5', 
		'-', '\x247', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x5', '/', '\x24F', '\n', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x258', '\n', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x263', '\n', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x267', '\n', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', 
		'\x35', '\x26E', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x271', '\v', 
		'\x35', '\x3', '\x35', '\x2', '\x3', 'N', '\x36', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', '\x2', '\f', '\x3', '\x2', ')', '+', '\x3', '\x2', '%', '&', 
		'\x3', '\x2', ',', '-', '\x3', '\x2', '.', '\x31', '\x3', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x39', '\x42', '\x3', '\x2', '\x46', 'H', '\x4', 
		'\x2', 'I', 'R', 'T', ']', '\x3', '\x2', '\x10', '\x11', '\x4', '\x2', 
		'!', '!', '%', '%', '\x2', '\x2AD', '\x2', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'p', '\x3', '\x2', '\x2', '\x2', '\x6', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x84', '\x3', '\x2', '\x2', '\x2', '\n', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x8D', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x10', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x97', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xE5', '\x3', '\x2', '\x2', '\x2', '\"', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xF1', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '(', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x10F', '\x3', '\x2', '\x2', '\x2', ',', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x117', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x32', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x136', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '<', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x152', '\x3', '\x2', '\x2', '\x2', '@', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x46', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x177', '\x3', '\x2', '\x2', '\x2', 'J', '\x180', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x188', '\x3', '\x2', '\x2', '\x2', 'N', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x239', '\x3', '\x2', '\x2', '\x2', 'T', '\x23B', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x23F', '\x3', '\x2', '\x2', '\x2', 'X', '\x246', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x24E', '\x3', '\x2', '\x2', '\x2', '^', '\x250', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x257', '\x3', '\x2', '\x2', '\x2', '\x62', '\x259', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x25F', '\x3', '\x2', '\x2', '\x2', 'h', '\x26A', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'l', '\x5', '\x4', '\x3', '\x2', 'k', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\a', '\x2', '\x2', '\x3', 'n', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'q', '\x5', '\x6', '\x4', '\x2', 'p', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 't', 'w', '\x5', '\b', '\x5', '\x2', 'u', 
		'w', '\x5', '\x30', '\x19', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x85', '\x5', '\n', '\x6', '\x2', 'y', '\x85', '\x5', '\xE', 
		'\b', '\x2', 'z', '\x85', '\x5', '\x10', '\t', '\x2', '{', '\x85', '\x5', 
		'\x12', '\n', '\x2', '|', '\x85', '\x5', '\x14', '\v', '\x2', '}', '\x85', 
		'\x5', '\x18', '\r', '\x2', '~', '\x85', '\x5', '\x1A', '\xE', '\x2', 
		'\x7F', '\x85', '\x5', '\x1C', '\xF', '\x2', '\x80', '\x85', '\x5', '\x1E', 
		'\x10', '\x2', '\x81', '\x85', '\x5', '(', '\x15', '\x2', '\x82', '\x85', 
		'\x5', '*', '\x16', '\x2', '\x83', '\x85', '\x5', '\x16', '\f', '\x2', 
		'\x84', 'x', '\x3', '\x2', '\x2', '\x2', '\x84', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x84', 'z', '\x3', '\x2', '\x2', '\x2', '\x84', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '|', '\x3', '\x2', '\x2', '\x2', '\x84', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '~', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x84', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\a', '\x19', '\x2', 
		'\x2', '\x87', '\x89', '\x5', '\f', '\a', '\x2', '\x88', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x1A', '\x2', 
		'\x2', '\x8B', '\v', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x5', 
		'\b', '\x5', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\x1B', '\x2', '\x2', '\x92', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x6', '\t', '\x2', 
		'\x2', '\x94', '\x95', '\x5', 'L', '\'', '\x2', '\x95', '\x96', '\x5', 
		'\\', '/', '\x2', '\x96', '\x11', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\a', 'X', '\x2', '\x2', '\x98', '\x99', '\a', '\x17', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', 'N', '(', '\x2', '\x9A', '\x9B', '\a', '\x18', 
		'\x2', '\x2', '\x9B', '\x9E', '\x5', '\b', '\x5', '\x2', '\x9C', '\x9D', 
		'\a', 'L', '\x2', '\x2', '\x9D', '\x9F', '\x5', '\b', '\x5', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'J', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\b', '\x5', '\x2', '\xA2', 
		'\xA3', '\a', 'U', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x17', '\x2', 
		'\x2', '\xA4', '\xA5', '\x5', 'N', '(', '\x2', '\xA5', '\xA6', '\a', '\x18', 
		'\x2', '\x2', '\xA6', '\xA7', '\x5', '\\', '/', '\x2', '\xA7', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', 'U', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x17', '\x2', '\x2', '\xAA', '\xAB', '\x5', 'N', '(', '\x2', 
		'\xAB', '\xAC', '\a', '\x18', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\b', 
		'\x5', '\x2', '\xAD', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', 
		'\a', 'S', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x17', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', 'N', '(', '\x2', '\xB1', '\xB2', '\a', 'Z', '\x2', '\x2', 
		'\xB2', '\xB3', '\x5', 'N', '(', '\x2', '\xB3', '\xB4', '\a', '\x18', 
		'\x2', '\x2', '\xB4', '\xB5', '\x5', '\b', '\x5', '\x2', '\xB5', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', 'R', '\x2', '\x2', '\xB7', 
		'\xB9', '\a', '\x17', '\x2', '\x2', '\xB8', '\xBA', '\x5', 'L', '\'', 
		'\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBD', '\a', '\x1B', '\x2', '\x2', '\xBC', '\xBE', '\x5', 'L', '\'', 
		'\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC1', '\a', '\x1B', '\x2', '\x2', '\xC0', '\xC2', '\x5', 'L', '\'', 
		'\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x18', '\x2', '\x2', '\xC4', '\xC6', '\x5', '\b', '\x5', 
		'\x2', '\xC5', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\x3', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'^', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x18', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '_', '\x2', '\x2', '\xCB', '\xD2', '\x5', '\\', '/', '\x2', 
		'\xCC', '\xCD', '\a', '\x4', '\x2', '\x2', '\xCD', '\xCE', '\a', '^', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\x18', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '_', '\x2', '\x2', '\xD0', '\xD2', '\x5', '\\', '/', '\x2', '\xD1', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'Q', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\\', '/', '\x2', '\xD5', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', 'I', '\x2', '\x2', '\xD7', 
		'\xD8', '\x5', '\\', '/', '\x2', '\xD8', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDB', '\a', 'P', '\x2', '\x2', '\xDA', '\xDC', '\x5', 
		'N', '(', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\\', '/', '\x2', '\xDE', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xE0', '\a', 'T', '\x2', '\x2', '\xE0', '\xE1', 
		'\a', '\x17', '\x2', '\x2', '\xE1', '\xE2', '\x5', 'N', '(', '\x2', '\xE2', 
		'\xE3', '\a', '\x18', '\x2', '\x2', '\xE3', '\xE4', '\x5', ' ', '\x11', 
		'\x2', '\xE4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', 
		'\x19', '\x2', '\x2', '\xE6', '\xE8', '\x5', '\"', '\x12', '\x2', '\xE7', 
		'\xE9', '\x5', '&', '\x14', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x1A', '\x2', '\x2', '\xEB', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\x5', '$', '\x13', '\x2', 
		'\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '#', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', 'K', '\x2', '\x2', '\xF2', '\xF3', '\x5', 'N', '(', '\x2', 
		'\xF3', '\xF5', '\a', ' ', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\f', 
		'\a', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '%', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', 'W', '\x2', '\x2', '\xF8', '\xFA', '\a', ' ', '\x2', '\x2', 
		'\xF9', '\xFB', '\x5', '\f', '\a', '\x2', '\xFA', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', 'Y', '\x2', '\x2', '\xFD', 
		'\xFF', '\x5', 'N', '(', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\x101', '\x5', '\\', '/', '\x2', '\x101', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', '[', '\x2', '\x2', 
		'\x103', '\x104', '\x5', '\n', '\x6', '\x2', '\x104', '\x105', '\x5', 
		',', '\x17', '\x2', '\x105', '\x110', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\a', '[', '\x2', '\x2', '\x107', '\x108', '\x5', '\n', '\x6', 
		'\x2', '\x108', '\x109', '\x5', '.', '\x18', '\x2', '\x109', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', '[', '\x2', '\x2', 
		'\x10B', '\x10C', '\x5', '\n', '\x6', '\x2', '\x10C', '\x10D', '\x5', 
		',', '\x17', '\x2', '\x10D', '\x10E', '\x5', '.', '\x18', '\x2', '\x10E', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\a', 'N', '\x2', '\x2', '\x112', '\x113', '\a', '\x17', 
		'\x2', '\x2', '\x113', '\x114', '\a', '^', '\x2', '\x2', '\x114', '\x115', 
		'\a', '\x18', '\x2', '\x2', '\x115', '\x116', '\x5', '\n', '\x6', '\x2', 
		'\x116', '-', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', 'O', 
		'\x2', '\x2', '\x118', '\x119', '\x5', '\n', '\x6', '\x2', '\x119', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', 'V', '\x2', '\x2', 
		'\x11B', '\x11C', '\a', '^', '\x2', '\x2', '\x11C', '\x11E', '\a', '\x17', 
		'\x2', '\x2', '\x11D', '\x11F', '\x5', '\x32', '\x1A', '\x2', '\x11E', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\a', '\x18', '\x2', '\x2', '\x121', '\x122', '\a', '\x19', '\x2', '\x2', 
		'\x122', '\x123', '\x5', '\x34', '\x1B', '\x2', '\x123', '\x124', '\a', 
		'\x1A', '\x2', '\x2', '\x124', '\x31', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x12A', '\a', '^', '\x2', '\x2', '\x126', '\x127', '\a', '\x1C', '\x2', 
		'\x2', '\x127', '\x129', '\a', '^', '\x2', '\x2', '\x128', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x33', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\x5', '\x4', '\x3', '\x2', 
		'\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x35', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x132', '\a', '\x15', '\x2', '\x2', '\x131', '\x133', '\x5', '\x38', 
		'\x1D', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\a', '\x16', '\x2', '\x2', '\x135', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x13B', '\x5', 'N', '(', '\x2', 
		'\x137', '\x138', '\a', '\x1C', '\x2', '\x2', '\x138', '\x13A', '\x5', 
		'N', '(', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x140', '\a', '\x19', '\x2', '\x2', '\x13F', '\x141', '\x5', 
		'<', '\x1F', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x144', '\a', '\x1C', '\x2', '\x2', '\x143', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', 
		'\x1A', '\x2', '\x2', '\x146', ';', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x14F', '\x5', '>', ' ', '\x2', '\x148', '\x14B', '\a', '\x1C', '\x2', 
		'\x2', '\x149', '\x14B', '\b', '\x1F', '\x1', '\x2', '\x14A', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\x5', 
		'>', ' ', '\x2', '\x14D', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x156', '\x5', 'V', ',', '\x2', '\x153', '\x157', '\a', ' ', '\x2', '\x2', 
		'\x154', '\x155', '\a', '\x1D', '\x2', '\x2', '\x155', '\x157', '\b', 
		' ', '\x1', '\x2', '\x156', '\x153', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x159', '\x5', 'N', '(', '\x2', '\x159', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '\x17', '\x2', '\x2', '\x15B', 
		'\x15D', '\x5', 'J', '&', '\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x18', '\x2', '\x2', 
		'\x15F', '\x41', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\a', '.', 
		'\x2', '\x2', '\x161', '\x162', '\x5', '\x46', '$', '\x2', '\x162', '\x163', 
		'\a', '/', '\x2', '\x2', '\x163', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\x5', '\x2', '\x2', '\x165', '\x167', '\a', '\x46', 
		'\x2', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x160', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x16D', '\a', '\x6', '\x2', '\x2', '\x16D', '\x16E', 
		'\x5', 'H', '%', '\x2', '\x16E', '\x45', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x174', '\x5', 'H', '%', '\x2', '\x170', '\x171', '\a', '\x1C', '\x2', 
		'\x2', '\x171', '\x173', '\x5', 'H', '%', '\x2', '\x172', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x176', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x175', 'G', '\x3', '\x2', '\x2', '\x2', '\x176', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x178', '\a', '\a', '\x2', '\x2', '\x178', 
		'\x17D', '\a', '^', '\x2', '\x2', '\x179', '\x17A', '\a', '!', '\x2', 
		'\x2', '\x17A', '\x17C', '\a', '^', '\x2', '\x2', '\x17B', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', 'I', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x185', '\x5', 'N', '(', '\x2', '\x181', 
		'\x182', '\a', '\x1C', '\x2', '\x2', '\x182', '\x184', '\x5', 'N', '(', 
		'\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18D', 
		'\x5', 'N', '(', '\x2', '\x189', '\x18A', '\a', '\x1C', '\x2', '\x2', 
		'\x18A', '\x18C', '\x5', 'N', '(', '\x2', '\x18B', '\x189', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', 'M', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', '\x2', 
		'\x2', '\x2', '\x190', '\x191', '\b', '(', '\x1', '\x2', '\x191', '\x193', 
		'\a', 'V', '\x2', '\x2', '\x192', '\x194', '\a', '^', '\x2', '\x2', '\x193', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x195', '\x3', '\x2', '\x2', '\x2', '\x195', '\x197', 
		'\a', '\x17', '\x2', '\x2', '\x196', '\x198', '\x5', '\x32', '\x1A', '\x2', 
		'\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x199', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x19A', '\a', '\x18', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x19', '\x2', 
		'\x2', '\x19B', '\x19C', '\x5', '\x34', '\x1B', '\x2', '\x19C', '\x19D', 
		'\a', '\x1A', '\x2', '\x2', '\x19D', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19F', '\a', 'M', '\x2', '\x2', '\x19F', '\x1A1', '\x5', 'N', 
		'(', '\x2', '\x1A0', '\x1A2', '\x5', '\x42', '\"', '\x2', '\x1A1', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 
		'@', '!', '\x2', '\x1A4', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\a', '#', '\x2', '\x2', '\x1A6', '\x1CD', '\x5', 'N', '(', '\x1D', 
		'\x1A7', '\x1A8', '\a', '$', '\x2', '\x2', '\x1A8', '\x1CD', '\x5', 'N', 
		'(', '\x1C', '\x1A9', '\x1AA', '\a', '%', '\x2', '\x2', '\x1AA', '\x1CD', 
		'\x5', 'N', '(', '\x1B', '\x1AB', '\x1AC', '\a', '&', '\x2', '\x2', '\x1AC', 
		'\x1CD', '\x5', 'N', '(', '\x1A', '\x1AD', '\x1AE', '\a', '\'', '\x2', 
		'\x2', '\x1AE', '\x1CD', '\x5', 'N', '(', '\x19', '\x1AF', '\x1B0', '\a', 
		'(', '\x2', '\x2', '\x1B0', '\x1CD', '\x5', 'N', '(', '\x18', '\x1B1', 
		'\x1CD', '\a', '^', '\x2', '\x2', '\x1B2', '\x1CD', '\x5', 'R', '*', '\x2', 
		'\x1B3', '\x1CD', '\x5', '\x36', '\x1C', '\x2', '\x1B4', '\x1CD', '\x5', 
		':', '\x1E', '\x2', '\x1B5', '\x1B6', '\a', '\x17', '\x2', '\x2', '\x1B6', 
		'\x1B7', '\x5', 'N', '(', '\x2', '\x1B7', '\x1B8', '\a', '\x18', '\x2', 
		'\x2', '\x1B8', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', 
		'\a', '\t', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', 'N', '(', '\x2', '\x1BB', 
		'\x1BC', '\a', '\n', '\x2', '\x2', '\x1BC', '\x1BD', '\a', '^', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\a', '\x6', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', '^', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '\x18', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\a', '\v', '\x2', '\x2', '\x1C1', '\x1C2', '\x5', 'N', 
		'(', '\x2', '\x1C2', '\x1C3', '\a', '\f', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x5', 'N', '(', '\x4', '\x1C4', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1C6', '\a', '\r', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '^', 
		'\x2', '\x2', '\x1C7', '\x1C8', '\a', '\x18', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\a', '\v', '\x2', '\x2', '\x1C9', '\x1CA', '\a', '`', '\x2', '\x2', '\x1CA', 
		'\x1CB', '\a', '\f', '\x2', '\x2', '\x1CB', '\x1CD', '\x5', 'N', '(', 
		'\x3', '\x1CC', '\x190', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1AF', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\f', '\"', '\x2', '\x2', '\x1CF', '\x1D0', '\a', 
		']', '\x2', '\x2', '\x1D0', '\x22D', '\x5', 'N', '(', '#', '\x1D1', '\x1D2', 
		'\f', '\x17', '\x2', '\x2', '\x1D2', '\x1D3', '\t', '\x2', '\x2', '\x2', 
		'\x1D3', '\x22D', '\x5', 'N', '(', '\x18', '\x1D4', '\x1D5', '\f', '\x16', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\t', '\x3', '\x2', '\x2', '\x1D6', '\x22D', 
		'\x5', 'N', '(', '\x17', '\x1D7', '\x1D8', '\f', '\x15', '\x2', '\x2', 
		'\x1D8', '\x1D9', '\t', '\x4', '\x2', '\x2', '\x1D9', '\x22D', '\x5', 
		'N', '(', '\x16', '\x1DA', '\x1DB', '\f', '\x14', '\x2', '\x2', '\x1DB', 
		'\x1DC', '\t', '\x5', '\x2', '\x2', '\x1DC', '\x22D', '\x5', 'N', '(', 
		'\x15', '\x1DD', '\x1DE', '\f', '\x13', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\t', '\x6', '\x2', '\x2', '\x1DF', '\x22D', '\x5', 'N', '(', '\x14', 
		'\x1E0', '\x1E1', '\f', '\x12', '\x2', '\x2', '\x1E1', '\x1E2', '\a', 
		'\x34', '\x2', '\x2', '\x1E2', '\x22D', '\x5', 'N', '(', '\x13', '\x1E3', 
		'\x1E4', '\f', '\x11', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '\x35', '\x2', 
		'\x2', '\x1E5', '\x22D', '\x5', 'N', '(', '\x12', '\x1E6', '\x1E7', '\f', 
		'\x10', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x36', '\x2', '\x2', '\x1E8', 
		'\x22D', '\x5', 'N', '(', '\x11', '\x1E9', '\x1EA', '\f', '\xF', '\x2', 
		'\x2', '\x1EA', '\x1EB', '\a', '\x37', '\x2', '\x2', '\x1EB', '\x22D', 
		'\x5', 'N', '(', '\x10', '\x1EC', '\x1ED', '\f', '\xE', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\a', '\x38', '\x2', '\x2', '\x1EE', '\x22D', '\x5', 
		'N', '(', '\xF', '\x1EF', '\x1F0', '\f', '\r', '\x2', '\x2', '\x1F0', 
		'\x1F1', '\a', '\x1E', '\x2', '\x2', '\x1F1', '\x22D', '\x5', 'N', '(', 
		'\xE', '\x1F2', '\x1F3', '\f', '\f', '\x2', '\x2', '\x1F3', '\x1F4', '\a', 
		'\x1F', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', 'N', '(', '\x2', '\x1F5', 
		'\x1F6', '\a', ' ', '\x2', '\x2', '\x1F6', '\x1F7', '\x5', 'N', '(', '\r', 
		'\x1F7', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\f', 
		'\v', '\x2', '\x2', '\x1F9', '\x1FA', '\a', '\x1D', '\x2', '\x2', '\x1FA', 
		'\x22D', '\x5', 'N', '(', '\f', '\x1FB', '\x1FC', '\f', '\n', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\x5', 'P', ')', '\x2', '\x1FD', '\x1FE', '\x5', 'N', 
		'(', '\v', '\x1FE', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', 
		'\f', '&', '\x2', '\x2', '\x200', '\x201', '\a', '\x15', '\x2', '\x2', 
		'\x201', '\x202', '\x5', 'L', '\'', '\x2', '\x202', '\x204', '\a', '\x16', 
		'\x2', '\x2', '\x203', '\x205', '\x5', '\x44', '#', '\x2', '\x204', '\x203', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\f', 
		'%', '\x2', '\x2', '\x207', '\x208', '\a', '\b', '\x2', '\x2', '\x208', 
		'\x20A', '\x5', 'V', ',', '\x2', '\x209', '\x20B', '\x5', '\x44', '#', 
		'\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20D', '\f', '$', '\x2', '\x2', '\x20D', '\x20E', '\a', '!', 
		'\x2', '\x2', '\x20E', '\x210', '\x5', 'V', ',', '\x2', '\x20F', '\x211', 
		'\x5', '\x44', '#', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\x211', '\x3', '\x2', '\x2', '\x2', '\x211', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x213', '\f', '#', '\x2', '\x2', '\x213', 
		'\x214', '\a', '\\', '\x2', '\x2', '\x214', '\x216', '\x5', 'V', ',', 
		'\x2', '\x215', '\x217', '\x5', '\x42', '\"', '\x2', '\x216', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x219', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21A', '\x5', 
		'@', '!', '\x2', '\x219', '\x218', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21C', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x21D', '\x5', '\x44', '#', '\x2', '\x21C', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x220', '\f', 
		'!', '\x2', '\x2', '\x21F', '\x221', '\x5', '\x42', '\"', '\x2', '\x220', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', '\x222', '\x224', 
		'\x5', '@', '!', '\x2', '\x223', '\x225', '\x5', '\x44', '#', '\x2', '\x224', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', 
		'\f', '\x1F', '\x2', '\x2', '\x227', '\x228', '\x6', '(', '\x18', '\x2', 
		'\x228', '\x22D', '\a', '#', '\x2', '\x2', '\x229', '\x22A', '\f', '\x1E', 
		'\x2', '\x2', '\x22A', '\x22B', '\x6', '(', '\x1A', '\x2', '\x22B', '\x22D', 
		'\a', '$', '\x2', '\x2', '\x22C', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1DD', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x1F2', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1F8', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x206', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x226', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x229', '\x3', '\x2', '\x2', 
		'\x2', '\x22D', '\x230', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', 'O', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', 
		'\x2', '\x2', '\x231', '\x232', '\t', '\a', '\x2', '\x2', '\x232', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x233', '\x23A', '\x5', '`', '\x31', '\x2', 
		'\x234', '\x23A', '\x5', '\x64', '\x33', '\x2', '\x235', '\x23A', '\a', 
		'_', '\x2', '\x2', '\x236', '\x23A', '\x5', '\x66', '\x34', '\x2', '\x237', 
		'\x23A', '\x5', 'T', '+', '\x2', '\x238', '\x23A', '\x5', '\x62', '\x32', 
		'\x2', '\x239', '\x233', '\x3', '\x2', '\x2', '\x2', '\x239', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'\x239', '\x236', '\x3', '\x2', '\x2', '\x2', '\x239', '\x237', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x238', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\t', '\b', '\x2', 
		'\x2', '\x23C', 'U', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x240', '\a', 
		'^', '\x2', '\x2', '\x23E', '\x240', '\x5', 'X', '-', '\x2', '\x23F', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x240', 'W', '\x3', '\x2', '\x2', '\x2', '\x241', '\x247', '\x5', 
		'Z', '.', '\x2', '\x242', '\x245', '\x5', '`', '\x31', '\x2', '\x243', 
		'\x245', '\x5', '\x64', '\x33', '\x2', '\x244', '\x242', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x243', '\x3', '\x2', '\x2', '\x2', '\x245', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x247', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x248', '\x249', '\t', '\t', '\x2', '\x2', '\x249', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x24F', '\a', '\x1B', '\x2', '\x2', 
		'\x24B', '\x24F', '\a', '\x2', '\x2', '\x3', '\x24C', '\x24F', '\x6', 
		'/', '\x1B', '\x2', '\x24D', '\x24F', '\x6', '/', '\x1C', '\x2', '\x24E', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x251', '\a', '\x2', '\x2', '\x3', '\x251', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x258', '\a', '\xE', '\x2', '\x2', '\x253', '\x254', 
		'\x5', '\x66', '\x34', '\x2', '\x254', '\x255', '\a', '!', '\x2', '\x2', 
		'\x255', '\x256', '\a', '\xE', '\x2', '\x2', '\x256', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x257', '\x252', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x258', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x259', '\x25A', '\x5', '\x66', '\x34', '\x2', '\x25A', '\x25B', 
		'\a', '!', '\x2', '\x2', '\x25B', '\x25C', '\a', '\xF', '\x2', '\x2', 
		'\x25C', '\x63', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\t', '\n', 
		'\x2', '\x2', '\x25E', '\x65', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', 
		'\a', '\x12', '\x2', '\x2', '\x260', '\x262', '\x5', 'h', '\x35', '\x2', 
		'\x261', '\x263', '\x5', '\x42', '\"', '\x2', '\x262', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x262', '\x263', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x266', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\a', '\x13', '\x2', 
		'\x2', '\x265', '\x267', '\a', '_', '\x2', '\x2', '\x266', '\x264', '\x3', 
		'\x2', '\x2', '\x2', '\x266', '\x267', '\x3', '\x2', '\x2', '\x2', '\x267', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\a', '\x12', '\x2', 
		'\x2', '\x269', 'g', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26F', '\a', 
		'^', '\x2', '\x2', '\x26B', '\x26C', '\t', '\v', '\x2', '\x2', '\x26C', 
		'\x26E', '\a', '^', '\x2', '\x2', '\x26D', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x271', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x270', 'i', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '=', 'k', 'r', 'v', '\x84', '\x88', '\x8F', '\x9E', '\xB9', 
		'\xBD', '\xC1', '\xC5', '\xD1', '\xDB', '\xE8', '\xEF', '\xF5', '\xFA', 
		'\xFE', '\x10F', '\x11E', '\x12A', '\x12E', '\x132', '\x13B', '\x140', 
		'\x143', '\x14A', '\x14F', '\x156', '\x15C', '\x168', '\x16A', '\x174', 
		'\x17D', '\x185', '\x18D', '\x193', '\x197', '\x1A1', '\x1CC', '\x204', 
		'\x20A', '\x210', '\x216', '\x219', '\x21C', '\x220', '\x224', '\x22C', 
		'\x22E', '\x239', '\x23F', '\x244', '\x246', '\x24E', '\x257', '\x262', 
		'\x266', '\x26F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ITVComponents.Scripting.CScript.Core
