@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources.TextsAndMessagesHelper
@(Html.Kendo().Grid<AuthenticationClaimMappingViewModel>().Name($"AuthTypeClaims{ViewData["authenticationTypeId"]}")
    //.HtmlAttributes(new { style = "width:50vw;" })
    .Columns(columns =>
    {
        columns.Bound(c => c.IncomingClaimName).Title(TextsAndMessagesHelper.IWCN_General_IcomingClaimName);
        columns.Bound(c => c.Condition).Title(TextsAndMessagesHelper.IWCN_General_IcomingClaimCondition);
        columns.Bound(c => c.OutgoingClaimName).Title(TextsAndMessagesHelper.IWCN_General_OutgoingClaimName);
        columns.Bound(c => c.OutgoingClaimValue).Title(TextsAndMessagesHelper.IWCN_General_OutgoingClaimValue);
        columns.Bound(c => c.OutgoingIssuer).Title(TextsAndMessagesHelper.IWCN_General_OutgoingIssuer);
        columns.Bound(c => c.OutgoingValueType).Title(TextsAndMessagesHelper.IWCN_General_OutgoingValueType);
        columns.Bound(c => c.OutgoingOriginalIssuer).Title(TextsAndMessagesHelper.IWCN_General_OutgoingOriginalIssuer);
        if (Context.RequestServices.VerifyUserPermissions(new [] {"AuthenticationTypes.Write"}))
        {
            columns.Command(ga =>
            {
                ga.Edit();
                ga.PopupConfirmDelete ();
            }).Width(180);
        }

    })
    .ToolBar(toolbar =>
    {
        toolbar.RefreshTable();
        if (Context.RequestServices.VerifyUserPermissions(new[] { "AuthenticationTypes.Write" }))
        {
            toolbar.Create();
        }
    })
    .DataSource(dataSource =>
    {
        var src = dataSource
            .Ajax()
            .Read(read => read.Action("ReadClaims", "AuthenticationType", new {authenticationTypeId = ViewData["authenticationTypeId"]}))
            .Sort(s => s.Add(m => m.IncomingClaimName).Ascending());
        if (Context.RequestServices.VerifyUserPermissions(new[] { "AuthenticationTypes.Write" }))
        {
            src.Create(create => create.Action("CreateClaim", "AuthenticationType", new {authenticationTypeId = ViewData["authenticationTypeId"]}))
                .Update(update => update.Action("UpdateClaim", "AuthenticationType"))
                .Destroy(destroy => destroy.Action("DestroyClaim", "AuthenticationType"));
        }
        src.Model(m => m.Id(t => t.AuthenticationClaimMappingId));
    })
    .Scrollable(s => s.Height("auto"))
    .Resizable(c => c.Columns(true)))