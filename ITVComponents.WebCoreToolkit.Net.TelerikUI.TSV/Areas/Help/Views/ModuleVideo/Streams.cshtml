@using ITVComponents.WebCoreToolkit.Net.Extensions
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Helpers
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.Extensions
@using Kendo.Mvc.UI
@model int

@Html.Uploader(UploadMode.MultiUpload, (string)ViewData["Handler"], "UploadTutorialStream", "ITVenture.Pages.Help.ModuleVideo.fileCommitted", height:200, width:500, customAttributes:new Dictionary<string, string>{{"parentTutorial",Model.ToString()},{"uploadHint","ITVenture.Pages.Help.ModuleVideo.BatchFileUpdateHint"}})

@(Html.Kendo().Grid<TutorialStreamViewModel>().Name($"StreamList{Model}")
    .HtmlAttributes(new { parentTutorial = Model.ToString() })
    .Columns(columns =>
    {
        columns.Bound(c => c.LanguageTag).Title(TextsAndMessagesHelper.IWCN_Language);
        columns.Bound(c => c.ContentType).Title(TextsAndMessagesHelper.IWCN_TutorialStreamFormat);
        columns.FileDownload(x => x.DownloadToken, TextsAndMessagesHelper.IWCN_Tutorial_DownloadStream, (string)ViewData["Handler"], "UploadTutorialStream", uploadHintHandler: "ITVenture.Pages.Help.ModuleVideo.FileUploadHint", forceDownload:true);
        if (Context.RequestServices.VerifyUserPermissions(new[] {"ModuleHelp.Write"}))
        {
            columns.Command(ga =>
            {
                ga.Edit();
                ga.PopupConfirmDelete();
            }).Width(180);
        }

    })
    .ToolBar(toolbar =>
    {
        toolbar.RefreshTable();
    })
    .DataSource(dataSource =>
    {
        var src = dataSource
            .Ajax()
            .Read(read => read.Action("ReadStream", "ModuleVideo",new {videoTutorialId = Model}));
        if (Context.RequestServices.VerifyUserPermissions(new[] {"ModuleHelp.Write"}))
        {
                src.Update(update => update.Action("UpdateStream", "ModuleVideo"))
                .Destroy(destroy => destroy.Action("DeleteStream", "ModuleVideo"));
        }
        src.Model(m => m.Id(t => t.VideoTutorialId))
            .Sort(n => n.Add(m => m.LanguageTag));
    })
    .Scrollable(s => s.Height("auto"))
    .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
    .Sortable(c => c.Enabled(true))
    .Filterable(f => f.Enabled(true))
    .Resizable(c => c.Columns(true)))