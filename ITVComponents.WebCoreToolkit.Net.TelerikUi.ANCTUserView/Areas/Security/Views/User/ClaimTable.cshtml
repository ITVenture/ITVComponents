@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.AspNetCoreTenantSecurityUserView.ViewModels
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources.TextsAndMessagesHelper
@{
    var tmp = Html.Kendo().Grid<UserClaimViewModel>().Name($"UserClaimsFor{ViewData["userId"]}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(c => c.ClaimType).Title(TextsAndMessagesHelper.IWCN_General_Name);
            columns.Bound(c => c.ClaimValue).Title(TextsAndMessagesHelper.IWCN_General_Value);
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Users.Claims.Write"}))
            {
                columns.Command(ga =>
                {
                    ga.Edit();
                    ga.PopupConfirmDelete();
                }).Width(180);
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            if (Context.RequestServices.VerifyUserPermissions(new []{"Users.Claims.Write"}))
            {
                toolbar.Create();
            }
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("ReadClaims", "User", new {userId = ViewData["userId"]}));
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Users.Claims.Write"}))
            {
                src.Create(create => create.Action("CreateClaim", "User", new {userId= ViewData["userId"]}))
                    .Update(update => update.Action("UpdateClaim", "User"))
                    .Destroy(destroy => destroy.Action("DestroyClaim", "User"));
            }
            src.Sort(n => n.Add(n => n.ClaimType)).Model(m => m.Id(t => t.Id));
        })
        .Scrollable(s => s.Height("auto"))
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
        .Resizable(c => c.Columns(true));
}

@tmp