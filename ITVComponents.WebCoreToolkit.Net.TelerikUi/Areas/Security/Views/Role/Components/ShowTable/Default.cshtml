@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Helpers
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.ViewModel
@using Kendo.Mvc.UI
@{
    var tmp = Html.Kendo().Grid<RoleViewModel>().Name($"RolesFor{ViewData["tenantId"]}_{ViewData["permissionId"]}_{ViewData["tenantUserId"]}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(c => c.RoleName).Title(TextsAndMessagesHelper.IWCN_General_Name);
            if (ViewData["permissionId"] != null)
            {
                columns.InlineCheckbox(e => e.Assigned, "UniQUID", readOnly: !Context.RequestServices.VerifyUserPermissions(new []{"Roles.AssignPermission"})).Title(TextsAndMessagesHelper.IWCN_P_STDV_Assigned).Width(150);
            }
            else if (ViewData["tenantUserId"] != null)
            {
                columns.InlineCheckbox(e => e.Assigned, "UniQUID", readOnly: !Context.RequestServices.VerifyUserPermissions(new []{"Roles.AssignUser"})).Title(TextsAndMessagesHelper.IWCN_P_STDV_Assigned).Width(150);
            }
            else
            {
                if (Context.RequestServices.VerifyUserPermissions(new[] {ToolkitPermission.Sysadmin}))
                {
                    columns.Bound(e => e.IsSystemRole).Title(TextsAndMessagesHelper.IWCN_General_Is_SystemRole);
                }

                if (Context.RequestServices.VerifyUserPermissions(new[] {"Roles.Write"}))
                    columns.Command(ga =>
                    {
                        ga.Edit().Visible("ITVenture.Pages.Security.TenantBoundObjectsHelper.isEditable");
                        ga.PopupConfirmDelete().Visible("ITVenture.Pages.Security.TenantBoundObjectsHelper.isEditable");
                    }).Width(180);
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            if (ViewData["permissionId"] == null && ViewData["tenantUserId"] == null && Context.RequestServices.VerifyUserPermissions(new []{"Roles.Write"}))
            {
                toolbar.Create();
            }
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("Read", "Role", new {tenantId = ViewData["tenantId"], permissionId = ViewData["permissionId"], tenantUserId = ViewData["tenantUserId"] }));
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Roles.Write","Roles.AssignPermission","Roles.AssignUser"}))
            {
                src.Create(create => create.Action("Create", "Role", new { tenantId = ViewData["tenantId"]}))
            .Update(update => update.Action("Update", "Role"))
            .Destroy(destroy => destroy.Action("Destroy", "Role"));
            }
            src.Model(m => m.Id(t => t.RoleId));
        })
.Scrollable(s => s.Height("auto"))
.Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
.Sortable(c => c.Enabled(true))
.Filterable(f => f.Enabled(true))
.Resizable(c => c.Columns(true));
    if (ViewData["tenantId"] != null && ViewData["tenantUserId"] == null && ViewData["permissionId"] == null)
    {
        tmp.ClientDetailTemplateId("RoleDetails");
    }
}

@tmp