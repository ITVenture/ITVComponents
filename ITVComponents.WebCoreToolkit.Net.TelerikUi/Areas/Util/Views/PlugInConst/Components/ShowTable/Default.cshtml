@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI

@(Html.Kendo().Grid<WebPluginConstantViewModel>().Name($"PluginConstants_{ViewData["tenantId"]}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(c => c.Name).Title(TextsAndMessagesHelper.IWCN_General_Name);
            columns.Bound(c => c.Value).Title(TextsAndMessagesHelper.IWCN_General_Value);
            if (Context.RequestServices.VerifyUserPermissions(new[] {"PlugInConstants.Write"}))
            {
                columns.Command(ga =>
                {
                    ga.Edit();
                    ga.PopupConfirmDelete();
                }).Width(180);
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            if (Context.RequestServices.VerifyUserPermissions(new []{"PlugInConstants.Write"}))
            {
                toolbar.Create();
            }

            toolbar.Custom().Name("AsmAnalyzer").Text("Show Assembly Analyzer").HtmlAttributes(new Dictionary<string, object> { { "class", "itv-fa-tbx" }, { "onclick", "ITVenture.Pages.Util.PlugInAnalysis.ShowAnalyzerDialog(event)" } }).IconClass("fas fa-flask");
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("Read", "PlugInConst", new{ tenantId = ViewData["tenantId"] }));
            if (Context.RequestServices.VerifyUserPermissions(new[] {"PlugInConstants.Write"}))
            {
                src.Create(create => create.Action("Create", "PlugInConst", new { tenantId = ViewData["tenantId"] }))
                    .Update(update => update.Action("Update", "PlugInConst"))
                    .Destroy(destroy => destroy.Action("Destroy", "PlugInConst"));
            }
            src.Model(m => m.Id(t => t.WebPluginConstantId));
        })
        .Scrollable(s => s.Height("auto"))
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
    .Resizable(c => c.Columns(true)))