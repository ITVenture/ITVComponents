@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.EntityFramework.Models
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI
@using Kendo.Mvc.UI.Fluent
@using Microsoft.AspNetCore.Localization
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources.TextsAndMessagesHelper
@{
    var requestLocalizer = Context.Features.Get<IRequestCultureFeature>();
    var showDetailsCaption = requestLocalizer?.GetIWCN_TV_Edit_Details() ?? TextsAndMessagesHelper.IWCN_TV_Edit_Details;
}
@(Html.Kendo().Grid<TenantViewModel>().Name($"TenantList{ViewData["userId"]}{ViewData["navigationMenuId"]}{ViewData["diagnosticsQueryId"]}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            if (ViewData["userId"] != null)
            {
                columns.InlineCheckbox(e => e.Assigned, "UniQUID", readOnly: !Context.RequestServices.VerifyUserPermissions(new[] { "Tenants.AssignUser" })).Title(TextsAndMessagesHelper.IWCN_TV_STDV_Assigned).Width(150);
            }
            else if (ViewData["navigationMenuId"] != null)
            {
                columns.InlineCheckbox(e => e.Assigned, "UniQUID", readOnly: !Context.RequestServices.VerifyUserPermissions(new[] { "Tenants.AssignNav" })).Title(TextsAndMessagesHelper.IWCN_TV_STDV_Assigned).Width(150);
            }
            else if (ViewData["diagnosticsQueryId"] != null)
            {
                columns.InlineCheckbox(e => e.Assigned, "UniQUID", readOnly: !Context.RequestServices.VerifyUserPermissions(new[] { "Tenants.AssignQuery" })).Title(TextsAndMessagesHelper.IWCN_TV_STDV_Assigned).Width(150);
            }

            columns.Bound(c => c.DisplayName).Title(TextsAndMessagesHelper.IWCN_General_DisplayName);
            columns.Bound(c => c.TenantName).Title(TextsAndMessagesHelper.IWCN_General_SystemName);
            if (ViewData["userId"] == null && ViewData["navigationMenuId"] == null && ViewData["diagnosticsQueryId"] == null)
            {
                columns.ForeignKey(c => c.TimeZone, (IEnumerable<ForeignKeyData<string>>)ViewData["TimeZoneInfo"], "Key", "Label").Title(TextsAndMessagesHelper.IWCN_General_TimeZone);
                if (Context.RequestServices.VerifyUserPermissions(new[] {"Tenants.Write"}))
                {
                    columns.Command(ga =>
                    {
                        ga.Edit();
                        ga.PopupConfirmDelete();
                        ga.Custom("showPopup").Text("\u200B").HtmlAttributes(new { @class = "itv-grid-button itv-fa-gbx glyphSprite", title = showDetailsCaption }).IconClass("fa-duotone fa-cube").Click("ITVenture.Pages.Security.TenantBoundObjectsHelper.showTenantSettings");
                    }).Width(180);
                }
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            if (Context.RequestServices.VerifyUserPermissions(new []{"Tenants.Write"}) && ViewData["userId"] == null && ViewData["navigationMenuId"] == null && ViewData["diagnosticsQueryId"] == null)
            {
                toolbar.Create();
            }
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("Read", "Tenant", new
                {
                    userId=ViewData["userId"],
                    navigationMenuId = ViewData["navigationMenuId"],
                    diagnosticsQueryId = ViewData["diagnosticsQueryId"]
                }));
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Tenants.Write"})
            && ViewData["userId"] == null && ViewData["navigationMenuId"] == null && ViewData["diagnosticsQueryId"] == null)
            {
                src.Create(create => create.Action("Create", "Tenant"))
                    .Update(update => update.Action("Update", "Tenant"))
                    .Destroy(destroy => destroy.Action("Destroy", "Tenant"));
            }
            else if (ViewData["userId"] != null && Context.RequestServices.VerifyUserPermissions(new[] { "Tenants.AssignUser" }))
            {
                src.Update(update => update.Action("UpdateTU", "Tenant", new { userId = ViewData["userId"] }));
            }
            else if (ViewData["navigationMenuId"] != null && Context.RequestServices.VerifyUserPermissions(new[] { "Tenants.AssignNav" }))
            {
                src.Update(update => update.Action("UpdateTN", "Tenant", new { navigationMenuId = ViewData["navigationMenuId"] }));
            }
            else if (ViewData["diagnosticsQueryId"] != null && Context.RequestServices.VerifyUserPermissions(new[] { "Tenants.AssignQuery" }))
            {
                src.Update(update => update.Action("UpdateTQ", "Tenant", new { diagnosticsQueryId = ViewData["diagnosticsQueryId"] }));
            }

            src.Model(m => m.Id(t => t.TenantId))
                .Sort(n => n.Add(m => m.TenantName));
        })
        .Scrollable(s => s.Height("auto"))
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
    .Resizable(c => c.Columns(true)))


@*Html.DetailViewScript("TenantSettings", "TSTT#=TenantId#", "~/Security/Tenant/SettingsTable?tenantId=#=TenantId#")

@Html.DetailViewScript("PermissionDetails", "Perm#=PermissionId#_#=TenantId#", "~/Security/Role/RoleTable?permissionId=#=PermissionId#&tenantId=#=TenantId#")
<script id="RoleDetails" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip().Name("RolesAssignment#=RoleId#")
        .SelectedIndex(0)
        .Items(item =>
        {
            item.Add().Text("Berechtigungen").LoadContentFrom("PermissionTable", "Permission", new {roleId = "#=RoleId#", tenantId = "#=TenantId#"});
            item.Add().Text("Benutzer").LoadContentFrom("UserTable", "User", new {roleId = "#=RoleId#", tenantId = "#=TenantId#"});

        }).ToClientTemplate())
</script>*@