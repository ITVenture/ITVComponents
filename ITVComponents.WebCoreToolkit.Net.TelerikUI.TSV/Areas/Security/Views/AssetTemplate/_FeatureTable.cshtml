@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using Kendo.Mvc.UI
@using Microsoft.AspNetCore.Http
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources.TextsAndMessagesHelper
@model AssetTemplateViewModel
@{
    var tmp = Html.Kendo().Grid<AssetFeatureViewModel>().Name($"FeaturesForAsset{Model.AssetTemplateId}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(c => c.FeatureName).Filterable(true).Title(TextsAndMessagesHelper.IWCN_General_Name);
            columns.Bound(c => c.Description).Title(TextsAndMessagesHelper.IWCN_General_Description);
            columns.InlineCheckbox(e => e.Assigned, "UniQUID").Title(TextsAndMessagesHelper.IWCN_P_STDV_Assigned).Width(150);
        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
        })
        .DataSource(dataSource =>
        {
            var tmp = dataSource
                .Ajax()
                .Read(read => read.Action("ReadFeatures", "AssetTemplate", new { assetTemplateId = Model.AssetTemplateId }))
                .Update(update => update.Action("UpdateFeature", "AssetTemplate"));

                tmp.Model(m => m.Id(t => t.FeatureId))
                .Sort(n => n.Add(m => m.FeatureName));
        })
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
        .Resizable(c => c.Columns(true));
}
@tmp