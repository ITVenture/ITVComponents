@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.AspNetCoreTenantSecurityUserView.ViewModels
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.AspNetCoreTenantSecurityUserView.Resources.TextsAndMessagesHelper
@{
    var tmp = Html.Kendo().Grid<UserLoginViewModel>().Name($"LoginsFor{ViewData["userId"]}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(c => c.LoginProvider);
            columns.Bound(c => c.ProviderKey);
            columns.Bound(c => c.ProviderDisplayName);
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Users.Logins.Write"}))
            {
                columns.Command(ga =>
                {
                    ga.PopupConfirmDelete();
                }).Width(180);
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("ReadLogins", "User", new {userId = ViewData["userId"]}));
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Users.Logins.Write"}))
            {
                src.Destroy(destroy => destroy.Action("DestroyLogin", "User"));
            }
            src.Model(m =>
            {
                m.Id(t => new { t.LoginProvider, t.ProviderKey });
                m.Field(f => f.UserId).Editable(false);
                m.Field(f => f.LoginProvider).Editable(false);
                m.Field(f => f.ProviderKey).Editable(false);
            })
                .Sort(n => n.Add(
                    m => m.ProviderDisplayName));
        })
        .Scrollable(s => s.Height("auto"))
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
        .Resizable(c => c.Columns(true));
}

@tmp