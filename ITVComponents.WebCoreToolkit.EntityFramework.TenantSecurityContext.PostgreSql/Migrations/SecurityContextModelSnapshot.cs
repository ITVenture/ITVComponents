// <auto-generated />
using System;
using ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.PostgreSql.Migrations
{
    [DbContext(typeof(SecurityContext))]
    partial class SecurityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermission", b =>
                {
                    b.Property<int>("AppPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppPermissionId"));

                    b.Property<int>("AppPermissionSetId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("AppPermissionId");

                    b.HasIndex("AppPermissionSetId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AppPermissions", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermissionSet", b =>
                {
                    b.Property<int>("AppPermissionSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppPermissionSetId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("AppPermissionSetId");

                    b.HasIndex(new[] { "Name" }, "UQ_AppPermissionSetName")
                        .IsUnique();

                    b.ToTable("AppPermissionSets", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", b =>
                {
                    b.Property<int>("AssetTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetTemplateId"));

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemKey")
                        .HasColumnType("text");

                    b.HasKey("AssetTemplateId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "SystemKey" }, "UQ_AssetTemplateSysKey")
                        .IsUnique();

                    b.ToTable("AssetTemplates", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplateFeature", b =>
                {
                    b.Property<int>("AssetTemplateFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetTemplateFeatureId"));

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.HasKey("AssetTemplateFeatureId");

                    b.HasIndex("AssetTemplateId");

                    b.HasIndex("FeatureId");

                    b.ToTable("AssetTemplateFeatures", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplateGrant", b =>
                {
                    b.Property<int>("AssetTemplateGrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetTemplateGrantId"));

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("AssetTemplateGrantId");

                    b.HasIndex("AssetTemplateId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AssetTemplateGrants", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplatePath", b =>
                {
                    b.Property<int>("AssetTemplatePathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetTemplatePathId"));

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("PathTemplate")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("AssetTemplatePathId");

                    b.HasIndex("AssetTemplateId");

                    b.ToTable("AssetTemplatePathFilters", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientApp", b =>
                {
                    b.Property<int>("ClientAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientAppId"));

                    b.Property<string>("ClientKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClientAppId");

                    b.ToTable("ClientApps", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppPermission", b =>
                {
                    b.Property<int>("ClientAppPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientAppPermissionId"));

                    b.Property<int>("AppPermissionSetId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientAppId")
                        .HasColumnType("integer");

                    b.HasKey("ClientAppPermissionId");

                    b.HasIndex("AppPermissionSetId");

                    b.HasIndex("ClientAppId");

                    b.ToTable("ClientAppPermissions", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppTemplate", b =>
                {
                    b.Property<int>("ClientAppTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientAppTemplateId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ClientAppTemplateId");

                    b.HasIndex(new[] { "Name" }, "IX_UniqueTemplateName")
                        .IsUnique();

                    b.ToTable("ClientAppTemplates", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppTemplatePermission", b =>
                {
                    b.Property<int>("ClientAppTemplatePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientAppTemplatePermissionId"));

                    b.Property<int>("AppPermissionSetId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientAppTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("ClientAppTemplatePermissionId");

                    b.HasIndex("AppPermissionSetId");

                    b.HasIndex("ClientAppTemplateId");

                    b.ToTable("ClientAppTemplatePermissions", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppUser", b =>
                {
                    b.Property<int>("ClientAppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientAppUserId"));

                    b.Property<int>("ClientAppId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TenantUserId")
                        .HasColumnType("integer");

                    b.HasKey("ClientAppUserId");

                    b.HasIndex("ClientAppId");

                    b.HasIndex(new[] { "Label" }, "UQ_ClientAppUser")
                        .IsUnique();

                    b.HasIndex(new[] { "TenantUserId", "ClientAppId" }, "UQ_TUserPerApp")
                        .IsUnique();

                    b.ToTable("ClientAppUsers", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.CustomUserProperty", b =>
                {
                    b.Property<int>("CustomUserPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomUserPropertyId"));

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomUserPropertyId");

                    b.HasIndex(new[] { "UserId", "PropertyType", "PropertyName" }, "UniqueUserProp")
                        .IsUnique();

                    b.ToTable("UserProperties", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardParam", b =>
                {
                    b.Property<int>("DashboardParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DashboardParamId"));

                    b.Property<int>("DashboardWidgetId")
                        .HasColumnType("integer");

                    b.Property<string>("InputConfig")
                        .HasColumnType("text");

                    b.Property<int>("InputType")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("DashboardParamId");

                    b.HasIndex("DashboardWidgetId");

                    b.ToTable("WidgetParams", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidget", b =>
                {
                    b.Property<int>("DashboardWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DashboardWidgetId"));

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("CustomQueryString")
                        .HasColumnType("text");

                    b.Property<int>("DiagnosticsQueryId")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Template")
                        .HasColumnType("text");

                    b.Property<string>("TitleTemplate")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("DashboardWidgetId");

                    b.HasIndex("DiagnosticsQueryId");

                    b.HasIndex(new[] { "SystemName" }, "IX_UniqueDashboardDef")
                        .IsUnique();

                    b.ToTable("Widgets", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidgetLocalization", b =>
                {
                    b.Property<int>("DashboardWidgetLocalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DashboardWidgetLocalizationId"));

                    b.Property<int>("DashboardWidgetId")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("LocaleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("DashboardWidgetLocalizationId");

                    b.HasIndex(new[] { "DashboardWidgetId", "LocaleName" }, "IX_UniqueDashboardLocaleDef")
                        .IsUnique();

                    b.ToTable("WidgetLocales", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQuery", b =>
                {
                    b.Property<int>("DiagnosticsQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiagnosticsQueryId"));

                    b.Property<bool>("AutoReturn")
                        .HasColumnType("boolean");

                    b.Property<string>("DbContext")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("DiagnosticsQueryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("QueryText")
                        .HasColumnType("text");

                    b.HasKey("DiagnosticsQueryId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "DiagnosticsQueryName" }, "IX_DiagnosticsQueryUniqueness")
                        .IsUnique();

                    b.ToTable("DiagnosticsQueries", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQueryParameter", b =>
                {
                    b.Property<int>("DiagnosticsQueryParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiagnosticsQueryParameterId"));

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<int>("DiagnosticsQueryId")
                        .HasColumnType("integer");

                    b.Property<string>("Format")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("Optional")
                        .HasColumnType("boolean");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ParameterType")
                        .HasColumnType("integer");

                    b.HasKey("DiagnosticsQueryParameterId");

                    b.HasIndex("DiagnosticsQueryId");

                    b.ToTable("DiagnosticsQueryParameters", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.NavigationMenu", b =>
                {
                    b.Property<int>("NavigationMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NavigationMenuId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RefTag")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpanClass")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UrlUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasComputedColumnSql("case when COALESCE(\"Url\",'')='' and COALESCE(\"RefTag\",'')='' then 'MENU__'||cast(\"NavigationMenuId\" as character varying(10)) when COALESCE(\"Url\",'')='' then \"RefTag\" else \"Url\" end");

                    b.HasKey("NavigationMenuId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "UrlUniqueness" }, "IX_UniqueUrl")
                        .IsUnique();

                    b.ToTable("Navigation", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PermissionNameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasComputedColumnSql("case when \"TenantId\" is null then \"PermissionName\" else '__T'||cast(\"TenantId\" as character varying(10))||'##'||\"PermissionName\" end");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PermissionNameUniqueness" }, "IX_UniquePermissionName")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("RoleNameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasComputedColumnSql("'__T'||cast(\"TenantId\" as character varying(10))||'##'||\"RoleName\"");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "RoleNameUniqueness" }, "IX_UniqueRoleName")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RolePermissionId"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "RoleId", "PermissionId", "TenantId" }, "IX_UniqueRolePermission")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAsset", b =>
                {
                    b.Property<int>("SharedAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SharedAssetId"));

                    b.Property<string>("AnonymousAccessTokenRaw")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("AssetKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("AssetTitle")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("NotAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NotBefore")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RootPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("SharedAssetId");

                    b.HasIndex("AssetTemplateId");

                    b.HasIndex("TenantId");

                    b.ToTable("SharedAssets", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAssetTenantFilter", b =>
                {
                    b.Property<int>("SharedAssetTenantFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SharedAssetTenantFilterId"));

                    b.Property<string>("LabelFilter")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("SharedAssetId")
                        .HasColumnType("integer");

                    b.HasKey("SharedAssetTenantFilterId");

                    b.HasIndex("SharedAssetId");

                    b.ToTable("SharedAssetTenantFilters", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAssetUserFilter", b =>
                {
                    b.Property<int>("SharedAssetUserFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SharedAssetUserFilterId"));

                    b.Property<string>("LabelFilter")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("SharedAssetId")
                        .HasColumnType("integer");

                    b.HasKey("SharedAssetUserFilterId");

                    b.HasIndex("SharedAssetId");

                    b.ToTable("SharedAssetUserFilters", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantDiagnosticsQuery", b =>
                {
                    b.Property<int>("TenantDiagnosticsQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantDiagnosticsQueryId"));

                    b.Property<int>("DiagnosticsQueryId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("TenantDiagnosticsQueryId");

                    b.HasIndex("DiagnosticsQueryId");

                    b.HasIndex(new[] { "TenantId", "DiagnosticsQueryId" }, "IX_UniqueDiagnosticsTenantLink")
                        .IsUnique();

                    b.ToTable("TenantDiagnosticsQueries", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantNavigationMenu", b =>
                {
                    b.Property<int>("TenantNavigationMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantNavigationMenuId"));

                    b.Property<int>("NavigationMenuId")
                        .HasColumnType("integer");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("TenantNavigationMenuId");

                    b.HasIndex("NavigationMenuId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "TenantId", "NavigationMenuId" }, "IX_UniqueTenantMenu")
                        .IsUnique();

                    b.ToTable("TenantNavigation", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantUser", b =>
                {
                    b.Property<int>("TenantUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantUserId"));

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TenantUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUsers", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AuthenticationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("UserId");

                    b.HasIndex("AuthenticationTypeId");

                    b.HasIndex(new[] { "UserName" }, "IX_UniqueUserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantUserId")
                        .HasColumnType("integer");

                    b.HasKey("UserRoleId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex(new[] { "RoleId", "TenantUserId" }, "IX_UniqueUserRole")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.UserWidget", b =>
                {
                    b.Property<int>("UserWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserWidgetId"));

                    b.Property<string>("CustomQueryString")
                        .HasColumnType("text");

                    b.Property<int>("DashboardWidgetId")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserWidgetId");

                    b.HasIndex("DashboardWidgetId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserWidgets", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationClaimMapping", b =>
                {
                    b.Property<int>("AuthenticationClaimMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthenticationClaimMappingId"));

                    b.Property<int>("AuthenticationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("IncomingClaimName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("OutgoingClaimName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("OutgoingClaimValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OutgoingIssuer")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("OutgoingOriginalIssuer")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("OutgoingValueType")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("AuthenticationClaimMappingId");

                    b.HasIndex("AuthenticationTypeId");

                    b.ToTable("AuthenticationClaimMappings", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", b =>
                {
                    b.Property<int>("AuthenticationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthenticationTypeId"));

                    b.Property<string>("AuthenticationTypeName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("AuthenticationTypeId");

                    b.HasIndex(new[] { "AuthenticationTypeName" }, "IX_UniqueAuthenticationType")
                        .IsUnique();

                    b.ToTable("AuthenticationTypes", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeatureId"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FeatureDescription")
                        .HasColumnType("text");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("FeatureId");

                    b.HasIndex(new[] { "FeatureName" }, "IX_FeatureUniqueness")
                        .IsUnique();

                    b.ToTable("Features", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.GlobalSetting", b =>
                {
                    b.Property<int>("GlobalSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GlobalSettingId"));

                    b.Property<bool>("JsonSetting")
                        .HasColumnType("boolean");

                    b.Property<string>("SettingsKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SettingsValue")
                        .HasColumnType("text");

                    b.HasKey("GlobalSettingId");

                    b.HasIndex(new[] { "SettingsKey" }, "UQ_GlobalSettingsKey")
                        .IsUnique();

                    b.ToTable("GlobalSettings", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.HealthScript", b =>
                {
                    b.Property<int>("HealthScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthScriptId"));

                    b.Property<string>("HealthScriptName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.HasKey("HealthScriptId");

                    b.HasIndex(new[] { "HealthScriptName" }, "UQ_NamedHealthScript")
                        .IsUnique();

                    b.ToTable("HealthScripts", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.SystemEvent", b =>
                {
                    b.Property<int>("SystemEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SystemEventId"));

                    b.Property<string>("Category")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("SystemEventId");

                    b.ToTable("SystemLog", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModule", b =>
                {
                    b.Property<int>("TemplateModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateModuleId"));

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateModuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TemplateModuleId");

                    b.HasIndex("FeatureId");

                    b.ToTable("TemplateModules", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleConfigurator", b =>
                {
                    b.Property<int>("TemplateModuleConfiguratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateModuleConfiguratorId"));

                    b.Property<string>("ConfiguratorTypeBack")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("CustomConfiguratorView")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TemplateModuleId")
                        .HasColumnType("integer");

                    b.HasKey("TemplateModuleConfiguratorId");

                    b.HasIndex("TemplateModuleId");

                    b.ToTable("TemplateModuleConfigurators", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleConfiguratorParameter", b =>
                {
                    b.Property<int>("TemplateModuleCfgParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateModuleCfgParameterId"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TemplateModuleConfiguratorId")
                        .HasColumnType("integer");

                    b.HasKey("TemplateModuleCfgParameterId");

                    b.HasIndex("TemplateModuleConfiguratorId");

                    b.ToTable("TemplateModuleConfiguratorParameters", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleScript", b =>
                {
                    b.Property<int>("TemplateModuleScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateModuleScriptId"));

                    b.Property<string>("ScriptFile")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("TemplateModuleId")
                        .HasColumnType("integer");

                    b.HasKey("TemplateModuleScriptId");

                    b.HasIndex("TemplateModuleId");

                    b.ToTable("TemplateModuleScripts", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantId"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("TenantPassword")
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.HasKey("TenantId");

                    b.HasIndex(new[] { "TenantName" }, "IX_UniqueTenant")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantFeatureActivation", b =>
                {
                    b.Property<int>("TenantFeatureActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantFeatureActivationId"));

                    b.Property<DateTime?>("ActivationEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActivationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("TenantFeatureActivationId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantFeatureActivations", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantSetting", b =>
                {
                    b.Property<int>("TenantSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantSettingId"));

                    b.Property<bool>("JsonSetting")
                        .HasColumnType("boolean");

                    b.Property<string>("SettingsKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SettingsValue")
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("TenantSettingId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "SettingsKey", "TenantId" }, "UQ_SettingsKey")
                        .IsUnique();

                    b.ToTable("TenantSettings", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantTemplate", b =>
                {
                    b.Property<int>("TenantTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantTemplateId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Markup")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("TenantTemplateId");

                    b.ToTable("TenantTemplates", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TrustedFullAccessComponent", b =>
                {
                    b.Property<int>("TrustedFullAccessComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrustedFullAccessComponentId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FullQualifiedTypeName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("TrustedForAllTenants")
                        .HasColumnType("boolean");

                    b.Property<bool>("TrustedForGlobals")
                        .HasColumnType("boolean");

                    b.HasKey("TrustedFullAccessComponentId");

                    b.HasIndex(new[] { "FullQualifiedTypeName" }, "UQ_TrustedComponentType")
                        .IsUnique();

                    b.ToTable("TrustedFullAccessComponents", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", b =>
                {
                    b.Property<int>("TutorialStreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TutorialStreamId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LanguageTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("VideoTutorialId")
                        .HasColumnType("integer");

                    b.HasKey("TutorialStreamId");

                    b.HasIndex("VideoTutorialId");

                    b.ToTable("TutorialStreams", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStreamBlob", b =>
                {
                    b.Property<int>("TutorialStreamBlobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TutorialStreamBlobId"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("TutorialStreamId")
                        .HasColumnType("integer");

                    b.HasKey("TutorialStreamBlobId");

                    b.HasIndex("TutorialStreamId")
                        .IsUnique();

                    b.ToTable("TutorialStreamBlob");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.VideoTutorial", b =>
                {
                    b.Property<int>("VideoTutorialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VideoTutorialId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModuleUrl")
                        .HasColumnType("text");

                    b.Property<string>("SortableName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("VideoTutorialId");

                    b.ToTable("Tutorials", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", b =>
                {
                    b.Property<int>("WebPluginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WebPluginId"));

                    b.Property<bool>("AutoLoad")
                        .HasColumnType("boolean");

                    b.Property<string>("Constructor")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("PluginNameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasComputedColumnSql("case when \"TenantId\" is null then \"UniqueName\" else '__T'||cast(\"TenantId\" as character varying(10))||'##'||\"UniqueName\" end");

                    b.Property<string>("StartupRegistrationConstructor")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WebPluginId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PluginNameUniqueness" }, "IX_UniquePluginName")
                        .IsUnique();

                    b.ToTable("WebPlugins", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginConstant", b =>
                {
                    b.Property<int>("WebPluginConstantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WebPluginConstantId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("NameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasComputedColumnSql("case when \"TenantId\" is null then \"Name\" else '__T'||cast(\"TenantId\" as character varying(10))||'##'||\"Name\" end");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WebPluginConstantId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "NameUniqueness" }, "IX_UniquePluginConst")
                        .IsUnique();

                    b.ToTable("WebPluginConstants", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginGenericParameter", b =>
                {
                    b.Property<int>("WebPluginGenericParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WebPluginGenericParameterId"));

                    b.Property<string>("GenericTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TypeExpression")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("WebPluginId")
                        .HasColumnType("integer");

                    b.HasKey("WebPluginGenericParameterId");

                    b.HasIndex(new[] { "WebPluginId", "GenericTypeName" }, "IX_UniqueGenericParamName")
                        .IsUnique();

                    b.ToTable("GenericPluginParams", (string)null);
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermissionSet", "PermissionSet")
                        .WithMany("Permissions")
                        .HasForeignKey("AppPermissionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionSet");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "RequiredFeature")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "RequiredPermission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.Navigation("RequiredFeature");

                    b.Navigation("RequiredPermission");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplateFeature", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", "Template")
                        .WithMany("FeatureGrants")
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplateGrant", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", "Template")
                        .WithMany("Grants")
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplatePath", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", "Template")
                        .WithMany("PathTemplates")
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppPermission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermissionSet", "PermissionSet")
                        .WithMany()
                        .HasForeignKey("AppPermissionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientApp", "ClientApp")
                        .WithMany("AppPermissions")
                        .HasForeignKey("ClientAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientApp");

                    b.Navigation("PermissionSet");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppTemplatePermission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermissionSet", "PermissionSet")
                        .WithMany()
                        .HasForeignKey("AppPermissionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppTemplate", "ClientAppTemplate")
                        .WithMany("AppPermissions")
                        .HasForeignKey("ClientAppTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAppTemplate");

                    b.Navigation("PermissionSet");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppUser", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientApp", "ClientApp")
                        .WithMany("Users")
                        .HasForeignKey("ClientAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantUser", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientApp");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.CustomUserProperty", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.User", "User")
                        .WithMany("UserProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardParam", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidget", "Parent")
                        .WithMany("Params")
                        .HasForeignKey("DashboardWidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidget", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQuery", "DiagnosticsQuery")
                        .WithMany()
                        .HasForeignKey("DiagnosticsQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticsQuery");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidgetLocalization", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidget", "Widget")
                        .WithMany("Localizations")
                        .HasForeignKey("DashboardWidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQuery", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQueryParameter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQuery", "DiagnosticsQuery")
                        .WithMany("Parameters")
                        .HasForeignKey("DiagnosticsQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticsQuery");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.NavigationMenu", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.NavigationMenu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "EntryPoint")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.Navigation("EntryPoint");

                    b.Navigation("Feature");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Role", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.RolePermission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAsset", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "AssetOwner")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetOwner");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAssetTenantFilter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAsset", "Asset")
                        .WithMany("TenantFilters")
                        .HasForeignKey("SharedAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAssetUserFilter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAsset", "Asset")
                        .WithMany("UserFilters")
                        .HasForeignKey("SharedAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantDiagnosticsQuery", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQuery", "DiagnosticsQuery")
                        .WithMany("Tenants")
                        .HasForeignKey("DiagnosticsQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticsQuery");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantNavigationMenu", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.NavigationMenu", "NavigationMenu")
                        .WithMany("Tenants")
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");

                    b.Navigation("Permission");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantUser", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.User", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", "AuthenticationType")
                        .WithMany()
                        .HasForeignKey("AuthenticationTypeId");

                    b.Navigation("AuthenticationType");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.UserRole", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.UserWidget", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidget", "Widget")
                        .WithMany()
                        .HasForeignKey("DashboardWidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationClaimMapping", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", "AuthenticationType")
                        .WithMany("ClaimMappings")
                        .HasForeignKey("AuthenticationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthenticationType");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModule", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "RequiredFeature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredFeature");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleConfigurator", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModule", "ParentModule")
                        .WithMany("Configurators")
                        .HasForeignKey("TemplateModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentModule");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleConfiguratorParameter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleConfigurator", "ParentConfigurator")
                        .WithMany("ViewComponentParameters")
                        .HasForeignKey("TemplateModuleConfiguratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentConfigurator");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleScript", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModule", "ParentModule")
                        .WithMany("Scripts")
                        .HasForeignKey("TemplateModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentModule");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantFeatureActivation", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "Feature")
                        .WithMany("Activations")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantSetting", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.VideoTutorial", "Parent")
                        .WithMany("Streams")
                        .HasForeignKey("VideoTutorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStreamBlob", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", "Parent")
                        .WithOne("Blob")
                        .HasForeignKey("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStreamBlob", "TutorialStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginConstant", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginGenericParameter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", "Plugin")
                        .WithMany("Parameters")
                        .HasForeignKey("WebPluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AppPermissionSet", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.AssetTemplate", b =>
                {
                    b.Navigation("FeatureGrants");

                    b.Navigation("Grants");

                    b.Navigation("PathTemplates");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientApp", b =>
                {
                    b.Navigation("AppPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.ClientAppTemplate", b =>
                {
                    b.Navigation("AppPermissions");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DashboardWidget", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Params");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.DiagnosticsQuery", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.NavigationMenu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.SharedAsset", b =>
                {
                    b.Navigation("TenantFilters");

                    b.Navigation("UserFilters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.TenantUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityContext.Models.User", b =>
                {
                    b.Navigation("TenantUsers");

                    b.Navigation("UserProperties");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", b =>
                {
                    b.Navigation("ClaimMappings");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", b =>
                {
                    b.Navigation("Activations");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModule", b =>
                {
                    b.Navigation("Configurators");

                    b.Navigation("Scripts");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TemplateModuleConfigurator", b =>
                {
                    b.Navigation("ViewComponentParameters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", b =>
                {
                    b.Navigation("Blob");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.VideoTutorial", b =>
                {
                    b.Navigation("Streams");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", b =>
                {
                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
