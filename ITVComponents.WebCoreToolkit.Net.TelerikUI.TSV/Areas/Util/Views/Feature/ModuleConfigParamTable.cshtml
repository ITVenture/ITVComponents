@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.ViewComponents
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources.TextsAndMessagesHelper
@(Html.Kendo().Grid<TemplateModuleConfiguratorParameterViewModel>().Name($"ModuleConfiguratorParamsFor{Model}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(n => n.ParameterName);
            columns.Bound(n => n.ParameterValue).ClientTemplate("<div style='white-space:pre-line;'>\\#=ITVenture.Tools.HtmlHelper.encode(ParameterValue!=null?ParameterValue:'')\\#</div>");
            if (Context.RequestServices.VerifyUserPermissions(new[] {"Sysadmin"}))
            {
                columns.Command(ga =>
                {
                    ga.Edit();
                    ga.PopupConfirmDelete();
                }).Width(180);
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            if (Context.RequestServices.VerifyUserPermissions(new []{"Sysadmin"}))
            {
                toolbar.Create();
            }
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("ReadConfiguratorParams", "Feature", new { templateModuleConfiguratorId = Model })).Sort(
                    c => c.Add(m => m.ParameterName).Ascending());
        if (Context.RequestServices.VerifyUserPermissions(new[] {"Sysadmin"}))
        {
                src.Create(create => create.Action("CreateConfiguratorParam", "Feature", new { templateModuleConfiguratorId = Model }))
                .Update(update => update.Action("UpdateConfiguratorParam", "Feature"))
                .Destroy(destroy => destroy.Action("DestroyConfiguratorParam", "Feature"));
        }
            src.Model(m =>
            {
                m.Id(t => t.TemplateModuleConfiguratorId);
            });
        })
        .Scrollable(s => s.Height("auto"))
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
    .Resizable(c => c.Columns(true)))