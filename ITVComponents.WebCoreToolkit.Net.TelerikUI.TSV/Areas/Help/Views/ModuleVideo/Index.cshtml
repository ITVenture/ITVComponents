@using ITVComponents.WebCoreToolkit.Net.Extensions
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Options
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.Extensions
@using Kendo.Mvc.UI
@using Microsoft.Extensions.Options
@inject IOptions<ViewOptions> viewOptions
@{
    Layout = viewOptions.Value.LayoutPage;
}
@{

    ViewBag.Title = TextsAndMessagesHelper.IWCN_Titles_TutorialVideos;
}
<script src="/_content/ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews/js/viewScripts.min.js"></script>

@(Html.Kendo().Grid<VideoTutorialViewModel>().Name("TutorialList")
    //.HtmlAttributes(new { style = "width:50vw;" })
    .Columns(columns =>
    {
        columns.Bound(c => c.DisplayName).Title(TextsAndMessagesHelper.IWCN_General_DisplayName).ClientTemplate("<pre>#=DisplayName#</pre>");;
        columns.Bound(c => c.SortableName).Title(TextsAndMessagesHelper.IWCN_General_DisplayName);
        columns.Bound(c => c.Description).Title(TextsAndMessagesHelper.IWCN_General_Description).ClientTemplate("<pre>#=Description#</pre>");;
        columns.Bound(c => c.ModuleUrl);
        if (Context.RequestServices.VerifyUserPermissions(new[] {"ModuleHelp.Write"}))
        {
            columns.Command(ga =>
            {
                ga.Edit();
                ga.PopupConfirmDelete();
            }).Width(180);
        }

    })
    .ToolBar(toolbar =>
    {
        toolbar.RefreshTable();
        if (Context.RequestServices.VerifyUserPermissions(new []{"ModuleHelp.Write"}))
        {
            toolbar.Create();
        }
    })
    .DataSource(dataSource =>
    {
        var src = dataSource
            .Ajax()
            .Read(read => read.Action("Read", "ModuleVideo"));
        if (Context.RequestServices.VerifyUserPermissions(new[] {"ModuleHelp.Write"}))
        {
            src.Create(create => create.Action("Create", "ModuleVideo"))
                .Update(update => update.Action("Update", "ModuleVideo"))
                .Destroy(destroy => destroy.Action("Delete", "ModuleVideo"));
        }
        src.Model(m => m.Id(t => t.VideoTutorialId))
            .Sort(n => n.Add(m => m.DisplayName));
    })
    .Scrollable(s => s.Height("auto"))
    .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
    .Sortable(c => c.Enabled(true))
    .Filterable(f => f.Enabled(true))
    .Resizable(c => c.Columns(true))
    .ClientDetailTemplateId("Streams"))

@Html.DetailViewScript("Streams","TutorialStreams#=VideoTutorialId#","/Help/ModuleVideo/Streams?videoTutorialId=#=VideoTutorialId#")