// <auto-generated />
using System;
using ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Migrations
{
    [DbContext(typeof(AspNetSecurityContext))]
    [Migration("20220531065512_SharedAssetManagement")]
    partial class SharedAssetManagement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", b =>
                {
                    b.Property<int>("AssetTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("SystemKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssetTemplateId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "SystemKey" }, "UQ_AssetTemplateSysKey")
                        .IsUnique()
                        .HasFilter("[SystemKey] IS NOT NULL");

                    b.ToTable("AssetTemplates");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplateFeature", b =>
                {
                    b.Property<int>("AssetTemplateFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("AssetTemplateFeatureId");

                    b.HasIndex("AssetTemplateId");

                    b.HasIndex("FeatureId");

                    b.ToTable("AssetTemplateFeatures");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplateGrant", b =>
                {
                    b.Property<int>("AssetTemplateGrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("AssetTemplateGrantId");

                    b.HasIndex("AssetTemplateId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AssetTemplateGrants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplatePath", b =>
                {
                    b.Property<int>("AssetTemplatePathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("PathTemplate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("AssetTemplatePathId");

                    b.HasIndex("AssetTemplateId");

                    b.ToTable("AssetTemplatePathFilters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.CustomUserProperty", b =>
                {
                    b.Property<int>("CustomUserPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("CustomUserPropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProperties");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardParam", b =>
                {
                    b.Property<int>("DashboardParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardWidgetId")
                        .HasColumnType("int");

                    b.Property<string>("InputConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("DashboardParamId");

                    b.HasIndex("DashboardWidgetId");

                    b.ToTable("WidgetParams");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardWidget", b =>
                {
                    b.Property<int>("DashboardWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomQueryString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosticsQueryId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleTemplate")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DashboardWidgetId");

                    b.HasIndex("DiagnosticsQueryId");

                    b.HasIndex(new[] { "SystemName" }, "IX_UniqueDashboardDef")
                        .IsUnique()
                        .HasFilter("[SystemName] IS NOT NULL");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQuery", b =>
                {
                    b.Property<int>("DiagnosticsQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoReturn")
                        .HasColumnType("bit");

                    b.Property<string>("DbContext")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DiagnosticsQueryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("QueryText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosticsQueryId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "DiagnosticsQueryName" }, "IX_DiagnosticsQueryUniqueness")
                        .IsUnique();

                    b.ToTable("DiagnosticsQueries");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQueryParameter", b =>
                {
                    b.Property<int>("DiagnosticsQueryParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosticsQueryId")
                        .HasColumnType("int");

                    b.Property<string>("Format")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("Optional")
                        .HasColumnType("bit");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ParameterType")
                        .HasColumnType("int");

                    b.HasKey("DiagnosticsQueryParameterId");

                    b.HasIndex("DiagnosticsQueryId");

                    b.ToTable("DiagnosticsQueryParameters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.NavigationMenu", b =>
                {
                    b.Property<int>("NavigationMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RefTag")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SpanClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UrlUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComputedColumnSql("case when isnull(Url,'')='' and isnull(RefTag,'')='' then 'MENU__'+convert(varchar(10),NavigationMenuId) when isnull(Url,'')='' then RefTag else Url end persisted");

                    b.HasKey("NavigationMenuId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "UrlUniqueness" }, "IX_UniqueUrl")
                        .IsUnique();

                    b.ToTable("Navigation");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PermissionNameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComputedColumnSql("case when TenantId is null then PermissionName else '__T'+convert(varchar(10),TenantId)+'##'+PermissionName end persisted");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PermissionNameUniqueness" }, "IX_UniquePermissionName")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoleNameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComputedColumnSql("'__T'+convert(varchar(10),TenantId)+'##'+RoleName persisted");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "RoleNameUniqueness" }, "IX_UniqueRoleName")
                        .IsUnique();

                    b.ToTable("SecurityRoles");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "RoleId", "PermissionId", "TenantId" }, "IX_UniqueRolePermission")
                        .IsUnique();

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAsset", b =>
                {
                    b.Property<int>("SharedAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnonymousAccessTokenRaw")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AssetKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AssetTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("AssetTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("NotAfter")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NotBefore")
                        .HasColumnType("datetime2");

                    b.Property<string>("RootPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("SharedAssetId");

                    b.HasIndex("AssetTemplateId");

                    b.HasIndex("TenantId");

                    b.ToTable("SharedAssets");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAssetTenantFilter", b =>
                {
                    b.Property<int>("SharedAssetTenantFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LabelFilter")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("SharedAssetId")
                        .HasColumnType("int");

                    b.HasKey("SharedAssetTenantFilterId");

                    b.HasIndex("SharedAssetId");

                    b.ToTable("SharedAssetTenantFilters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAssetUserFilter", b =>
                {
                    b.Property<int>("SharedAssetUserFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LabelFilter")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("SharedAssetId")
                        .HasColumnType("int");

                    b.HasKey("SharedAssetUserFilterId");

                    b.HasIndex("SharedAssetId");

                    b.ToTable("SharedAssetUserFilters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantDiagnosticsQuery", b =>
                {
                    b.Property<int>("TenantDiagnosticsQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiagnosticsQueryId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("TenantDiagnosticsQueryId");

                    b.HasIndex("DiagnosticsQueryId");

                    b.HasIndex(new[] { "TenantId", "DiagnosticsQueryId" }, "IX_UniqueDiagnosticsTenantLink")
                        .IsUnique();

                    b.ToTable("TenantDiagnosticsQueries");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantNavigationMenu", b =>
                {
                    b.Property<int>("TenantNavigationMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NavigationMenuId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("TenantNavigationMenuId");

                    b.HasIndex("NavigationMenuId");

                    b.HasIndex("PermissionId");

                    b.HasIndex(new[] { "TenantId", "NavigationMenuId" }, "IX_UniqueTenantMenu")
                        .IsUnique();

                    b.ToTable("TenantNavigation");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantUser", b =>
                {
                    b.Property<int>("TenantUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TenantUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUsers");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AuthenticationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticationTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("TenantUserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex(new[] { "RoleId", "TenantUserId" }, "IX_UniqueUserRole")
                        .IsUnique();

                    b.ToTable("TenantUserRoles");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.UserWidget", b =>
                {
                    b.Property<int>("UserWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomQueryString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DashboardWidgetId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserWidgetId");

                    b.HasIndex("DashboardWidgetId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserWidgets");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationClaimMapping", b =>
                {
                    b.Property<int>("AuthenticationClaimMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthenticationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingClaimName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OutgoingClaimName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OutgoingClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingIssuer")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OutgoingOriginalIssuer")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OutgoingValueType")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("AuthenticationClaimMappingId");

                    b.HasIndex("AuthenticationTypeId");

                    b.ToTable("AuthenticationClaimMappings");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", b =>
                {
                    b.Property<int>("AuthenticationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthenticationTypeName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("AuthenticationTypeId");

                    b.HasIndex(new[] { "AuthenticationTypeName" }, "IX_UniqueAuthenticationType")
                        .IsUnique();

                    b.ToTable("AuthenticationTypes");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FeatureDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("FeatureId");

                    b.HasIndex(new[] { "FeatureName" }, "IX_FeatureUniqueness")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.GlobalSetting", b =>
                {
                    b.Property<int>("GlobalSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("JsonSetting")
                        .HasColumnType("bit");

                    b.Property<string>("SettingsKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingsValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlobalSettingId");

                    b.HasIndex(new[] { "SettingsKey" }, "UQ_GlobalSettingsKey")
                        .IsUnique();

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.SystemEvent", b =>
                {
                    b.Property<int>("SystemEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("SystemEventId");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TenantPassword")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("TenantId");

                    b.HasIndex(new[] { "TenantName" }, "IX_UniqueTenant")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantFeatureActivation", b =>
                {
                    b.Property<int>("TenantFeatureActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActivationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActivationStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("TenantFeatureActivationId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantFeatureActivations");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantSetting", b =>
                {
                    b.Property<int>("TenantSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("JsonSetting")
                        .HasColumnType("bit");

                    b.Property<string>("SettingsKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingsValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("TenantSettingId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "SettingsKey", "TenantId" }, "UQ_SettingsKey")
                        .IsUnique();

                    b.ToTable("TenantSettings");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantTemplate", b =>
                {
                    b.Property<int>("TenantTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Markup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("TenantTemplateId");

                    b.ToTable("TenantTemplates");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TrustedFullAccessComponent", b =>
                {
                    b.Property<int>("TrustedFullAccessComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullQualifiedTypeName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("TrustedForAllTenants")
                        .HasColumnType("bit");

                    b.Property<bool>("TrustedForGlobals")
                        .HasColumnType("bit");

                    b.HasKey("TrustedFullAccessComponentId");

                    b.HasIndex(new[] { "FullQualifiedTypeName" }, "UQ_TrustedComponentType")
                        .IsUnique();

                    b.ToTable("TrustedFullAccessComponents");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", b =>
                {
                    b.Property<int>("TutorialStreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VideoTutorialId")
                        .HasColumnType("int");

                    b.HasKey("TutorialStreamId");

                    b.HasIndex("VideoTutorialId");

                    b.ToTable("TutorialStreams");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStreamBlob", b =>
                {
                    b.Property<int>("TutorialStreamBlobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TutorialStreamId")
                        .HasColumnType("int");

                    b.HasKey("TutorialStreamBlobId");

                    b.HasIndex("TutorialStreamId")
                        .IsUnique();

                    b.ToTable("TutorialStreamBlob");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.VideoTutorial", b =>
                {
                    b.Property<int>("VideoTutorialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortableName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("VideoTutorialId");

                    b.ToTable("Tutorials");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", b =>
                {
                    b.Property<int>("WebPluginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoLoad")
                        .HasColumnType("bit");

                    b.Property<string>("Constructor")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("PluginNameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComputedColumnSql("case when TenantId is null then UniqueName else '__T'+convert(varchar(10),TenantId)+'##'+UniqueName end persisted");

                    b.Property<string>("StartupRegistrationConstructor")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WebPluginId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PluginNameUniqueness" }, "IX_UniquePluginName")
                        .IsUnique();

                    b.ToTable("WebPlugins");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginConstant", b =>
                {
                    b.Property<int>("WebPluginConstantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NameUniqueness")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComputedColumnSql("case when TenantId is null then Name else '__T'+convert(varchar(10),TenantId)+'##'+Name end persisted");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WebPluginConstantId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "NameUniqueness" }, "IX_UniquePluginConst")
                        .IsUnique();

                    b.ToTable("WebPluginConstants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginGenericParameter", b =>
                {
                    b.Property<int>("WebPluginGenericParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenericTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeExpression")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("WebPluginId")
                        .HasColumnType("int");

                    b.HasKey("WebPluginGenericParameterId");

                    b.HasIndex(new[] { "WebPluginId", "GenericTypeName" }, "IX_UniqueGenericParamName")
                        .IsUnique()
                        .HasFilter("[GenericTypeName] IS NOT NULL");

                    b.ToTable("GenericPluginParams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "RequiredFeature")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", "RequiredPermission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.Navigation("RequiredFeature");

                    b.Navigation("RequiredPermission");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplateFeature", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", "Template")
                        .WithMany("FeatureGrants")
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplateGrant", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", "Template")
                        .WithMany("Grants")
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplatePath", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", "Template")
                        .WithMany("PathTemplates")
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.CustomUserProperty", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", "User")
                        .WithMany("UserProperties")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardParam", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardWidget", "Parent")
                        .WithMany("Params")
                        .HasForeignKey("DashboardWidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardWidget", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQuery", "DiagnosticsQuery")
                        .WithMany()
                        .HasForeignKey("DiagnosticsQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticsQuery");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQuery", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQueryParameter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQuery", "DiagnosticsQuery")
                        .WithMany("Parameters")
                        .HasForeignKey("DiagnosticsQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticsQuery");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.NavigationMenu", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.NavigationMenu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", "EntryPoint")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.Navigation("EntryPoint");

                    b.Navigation("Feature");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Role", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.RolePermission", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAsset", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("AssetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "AssetOwner")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetOwner");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAssetTenantFilter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAsset", "Asset")
                        .WithMany("TenantFilters")
                        .HasForeignKey("SharedAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAssetUserFilter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAsset", "Asset")
                        .WithMany("UserFilters")
                        .HasForeignKey("SharedAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantDiagnosticsQuery", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQuery", "DiagnosticsQuery")
                        .WithMany("Tenants")
                        .HasForeignKey("DiagnosticsQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticsQuery");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantNavigationMenu", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.NavigationMenu", "NavigationMenu")
                        .WithMany("Tenants")
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");

                    b.Navigation("Permission");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantUser", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", "AuthenticationType")
                        .WithMany()
                        .HasForeignKey("AuthenticationTypeId");

                    b.Navigation("AuthenticationType");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.UserRole", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.UserWidget", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardWidget", "Widget")
                        .WithMany()
                        .HasForeignKey("DashboardWidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationClaimMapping", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", "AuthenticationType")
                        .WithMany("ClaimMappings")
                        .HasForeignKey("AuthenticationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthenticationType");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantFeatureActivation", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", "Feature")
                        .WithMany("Activations")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TenantSetting", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.VideoTutorial", "Parent")
                        .WithMany("Streams")
                        .HasForeignKey("VideoTutorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStreamBlob", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", "Parent")
                        .WithOne("Blob")
                        .HasForeignKey("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStreamBlob", "TutorialStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginConstant", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPluginGenericParameter", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", "Plugin")
                        .WithMany("Parameters")
                        .HasForeignKey("WebPluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.AssetTemplate", b =>
                {
                    b.Navigation("FeatureGrants");

                    b.Navigation("Grants");

                    b.Navigation("PathTemplates");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DashboardWidget", b =>
                {
                    b.Navigation("Params");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.DiagnosticsQuery", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.NavigationMenu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.SharedAsset", b =>
                {
                    b.Navigation("TenantFilters");

                    b.Navigation("UserFilters");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.TenantUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.AspNetCoreTenants.Models.User", b =>
                {
                    b.Navigation("TenantUsers");

                    b.Navigation("UserProperties");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.AuthenticationType", b =>
                {
                    b.Navigation("ClaimMappings");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.Feature", b =>
                {
                    b.Navigation("Activations");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.TutorialStream", b =>
                {
                    b.Navigation("Blob");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.VideoTutorial", b =>
                {
                    b.Navigation("Streams");
                });

            modelBuilder.Entity("ITVComponents.WebCoreToolkit.EntityFramework.TenantSecurityShared.Models.WebPlugin", b =>
                {
                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
