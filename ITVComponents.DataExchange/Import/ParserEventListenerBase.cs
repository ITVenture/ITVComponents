using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using ITVComponents.DataAccess;
using ITVComponents.DataAccess.Extensions;
using ITVComponents.Helpers;
using ITVComponents.Logging;

namespace ITVComponents.DataExchange.Import
{
    /// <summary>
    /// Basic implementation of a Parser - Eventlistener
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class ParserEventListenerBase:IParserEventListener
    {
        /// <summary>
        /// The target severity of this Instance
        /// </summary>
        private ParserEventSeverity targetSeverity;

        /// <summary>
        /// Holds a list of available Dumpers
        /// </summary>
        private List<IParserEventDumper> dumpers = new List<IParserEventDumper>();

        /// <summary>
        /// Initializes a new instance of the ParserEventListenerBase class
        /// </summary>
        /// <param name="severity">the severity on which to listen from this listener</param>
        protected ParserEventListenerBase(ParserEventSeverity severity)
        {
            targetSeverity = severity;
        }
        #region Implementation of IParserEventListener<in T>

        /// <summary>
        /// Adds a Dumper to the list of available Dumpers for this listener
        /// </summary>
        /// <param name="dumper">a dumper object that is used to write the generated log-messages to specific target</param>
        public virtual void AddDumper(IParserEventDumper dumper)
        {
            dumpers.Add(dumper);
        }

        /// <summary>
        /// Removes the given Dumper from the list of available Dumpers
        /// </summary>
        /// <param name="dumper">the dumper object to remove from the list of available dumpers</param>
        public bool RemoveDumper(IParserEventDumper dumper)
        {
            return dumpers.Remove(dumper);
        }

        /// <summary>
        /// Removes all Dumpers from this Parser-Listener
        /// </summary>
        public void ClearDumpers()
        {
            dumpers.Clear();
        }

        public void DumpAllReports()
        {
            dumpers.ForEach(TryInitDumper);
            try
            {
                DumpAllEvents();
            }
            finally
            {
                dumpers.ForEach(TryFinalizeDumper);
            }
        }

        /// <summary>
        /// Reports an event for a specific input-dataset
        /// </summary>
        /// <param name="data">the data that was generated by a specific source</param>
        /// <param name="message">the message that was generated by the parser or the source</param>
        /// <param name="severity">the severity of the event</param>
        /// <param name="result">the result that was generated by the parser</param>
        public void ReportEvent(object data, string message, ParserEventSeverity severity, DynamicResult result=null)
        {
            if ((severity & targetSeverity) != 0)
            {
                AddEvent(data, message, severity, result);
            }
        }

        /// <summary>
        /// Offers the possibility to process filtered Events that match the configured Severity 
        /// </summary>
        /// <param name="data">the data that leads to this event</param>
        /// <param name="message">the generated message by a parser or a data-provider</param>
        /// <param name="severity">the severity of the event</param>
        /// <param name="result">the result that was generated by the parser</param>
        protected abstract void AddEvent(object data, string message, ParserEventSeverity severity, DynamicResult result);

        /// <summary>
        /// Dumps a single event to all dumpers attached to this listener
        /// </summary>
        /// <param name="record">the event record that needs to be delivered to each connected dumper</param>
        protected void DumpEvent(ParserEventRecord record)
        {
            foreach (var dumper in dumpers)
            {
                try
                {
                    dumper.DumpEvent(record);
                }
                catch (Exception ex)
                {
                    LogEnvironment.LogEvent(ex.OutlineException(), LogSeverity.Error);
                }
            }
        }

        /// <summary>
        /// Dumps all Events to the target event Dumpers
        /// </summary>
        protected abstract void DumpAllEvents();

        /// <summary>
        /// Initializes all Event-Dumpers
        /// </summary>
        /// <param name="dumper">the dumper that will write the collected events of this listener</param>
        private void TryInitDumper(IParserEventDumper dumper)
        {
            try
            {
                dumper.InitializeForEventDump();
            }
            catch (Exception ex)
            {
                LogEnvironment.LogEvent(ex.OutlineException(), LogSeverity.Error);
            }
        }

        /// <summary>
        /// Initializes all Event-Dumpers
        /// </summary>
        /// <param name="dumper">the dumper that will write the collected events of this listener</param>
        private void TryFinalizeDumper(IParserEventDumper dumper)
        {
            try
            {
                dumper.FinalizeEventDump();
            }
            catch (Exception ex)
            {
                LogEnvironment.LogEvent(ex.OutlineException(), LogSeverity.Error);
            }
        }

        #endregion
    }
}
