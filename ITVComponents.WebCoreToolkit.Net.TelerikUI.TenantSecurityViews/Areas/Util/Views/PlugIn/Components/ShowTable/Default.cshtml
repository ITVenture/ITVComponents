@using ITVComponents.WebCoreToolkit.Net.Extensions
@using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
@using System.Text.Encodings.Web
@using System.Collections
@using ITVComponents.WebCoreToolkit.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Resources
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.ViewModel
@using ITVComponents.WebCoreToolkit.Net.ViewModel
@using Kendo.Mvc.UI
@using TextsAndMessagesHelper = ITVComponents.WebCoreToolkit.Net.TelerikUi.TenantSecurityViews.Resources.TextsAndMessagesHelper
@(Html.Kendo().Grid<WebPluginViewModel>().Name($"PlugIns{ViewData["tenantId"]}")
        //.HtmlAttributes(new { style = "width:50vw;" })
        .Columns(columns =>
        {
            columns.Bound(c => c.UniqueName).Title(TextsAndMessagesHelper.IWCN_General_Name);
            columns.Bound(c => c.Constructor);
            columns.Bound(c => c.StartupRegistrationConstructor).Title("Web-Start - Constructor");
            columns.InlineCheckbox(c => c.AutoLoad, "WebPluginId", readOnly: true);
            if (Context.RequestServices.VerifyUserPermissions(new[] {"PlugIns.Write"}))
            {
                columns.Command(ga =>
                {
                    ga.Edit();
                    ga.PopupConfirmDelete();
                }).Width(180);
            }

        })
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            if (Context.RequestServices.VerifyUserPermissions(new []{"PlugIns.Write"}))
            {
                toolbar.Create();
            }

            toolbar.Custom().Name("AsmAnalyzer").Text("Show Assembly Analyzer").HtmlAttributes(new Dictionary<string,object>{{"class", "itv-fa-tbx"}, { "onclick", "ITVenture.Pages.Util.PlugInAnalysis.ShowAnalyzerDialog(event)" } }).IconClass("fas fa-flask");
        })
        .DataSource(dataSource =>
        {
            var src = dataSource
                .Ajax()
                .Read(read => read.Action("Read", "PlugIn", new { tenantId = ViewData["tenantId"] })).Sort(
                    c => c.Add(m => m.UniqueName).Ascending());
        if (Context.RequestServices.VerifyUserPermissions(new[] {"PlugIns.Write"}))
        {
            src.Create(create => create.Action("Create", "PlugIn", new { tenantId = ViewData["tenantId"] }))
                .Update(update => update.Action("Update", "PlugIn"))
                .Destroy(destroy => destroy.Action("Destroy", "PlugIn"));
        }
        src.Model(m => m.Id(t => t.WebPluginId));
    })
        .Scrollable(s => s.Height("auto"))
        .Pageable(p => p.Input(false).Numeric(true).Info(true).PreviousNext(true).PageSizes(true))
        .Sortable(c => c.Enabled(true))
        .Filterable(f => f.Enabled(true))
    .Resizable(c => c.Columns(true)))